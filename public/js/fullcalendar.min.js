(function(e) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "moment" ], e);
    } else if (typeof exports === "object") {
        module.exports = e(require("jquery"), require("moment"));
    } else {
        e(jQuery, moment);
    }
})(function(e, t) {
    var n = e.fullCalendar = {
        version: "2.9.0",
        internalApiVersion: 4
    };
    var i = n.views = {};
    e.fn.fullCalendar = function(t) {
        var n = Array.prototype.slice.call(arguments, 1);
        var i = this;
        this.each(function(r, s) {
            var a = e(s);
            var o = a.data("fullCalendar");
            var l;
            if (typeof t === "string") {
                if (o && e.isFunction(o[t])) {
                    l = o[t].apply(o, n);
                    if (!r) {
                        i = l;
                    }
                    if (t === "destroy") {
                        a.removeData("fullCalendar");
                    }
                }
            } else if (!o) {
                o = new St(a, t);
                a.data("fullCalendar", o);
                o.render();
            }
        });
        return i;
    };
    var r = [ "header", "buttonText", "buttonIcons", "themeButtonIcons" ];
    function s(e) {
        return te(e, r);
    }
    function a(t) {
        var n = {
            views: t.views || {}
        };
        var i;
        e.each(t, function(t, s) {
            if (t != "views") {
                if (e.isPlainObject(s) && !/(time|duration|interval)$/i.test(t) && e.inArray(t, r) == -1) {
                    i = null;
                    e.each(s, function(e, r) {
                        if (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(e)) {
                            if (!n.views[e]) {
                                n.views[e] = {};
                            }
                            n.views[e][t] = r;
                        } else {
                            if (!i) {
                                i = {};
                            }
                            i[e] = r;
                        }
                    });
                    if (i) {
                        n[t] = i;
                    }
                } else {
                    n[t] = s;
                }
            }
        });
        return n;
    }
    n.intersectRanges = _;
    n.applyAll = oe;
    n.debounce = pe;
    n.isInt = ve;
    n.htmlEscape = ue;
    n.cssToStr = de;
    n.proxy = ge;
    n.capitaliseFirstLetter = he;
    function o(e, t) {
        if (t.left) {
            e.css({
                "border-left-width": 1,
                "margin-left": t.left - 1
            });
        }
        if (t.right) {
            e.css({
                "border-right-width": 1,
                "margin-right": t.right - 1
            });
        }
    }
    function l(e) {
        e.css({
            "margin-left": "",
            "margin-right": "",
            "border-left-width": "",
            "border-right-width": ""
        });
    }
    function u() {
        e("body").addClass("fc-not-allowed");
    }
    function c() {
        e("body").removeClass("fc-not-allowed");
    }
    function d(t, n, i) {
        var r = Math.floor(n / t.length);
        var s = Math.floor(n - r * (t.length - 1));
        var a = [];
        var o = [];
        var l = [];
        var u = 0;
        h(t);
        t.each(function(n, i) {
            var c = n === t.length - 1 ? s : r;
            var d = e(i).outerHeight(true);
            if (d < c) {
                a.push(i);
                o.push(d);
                l.push(e(i).height());
            } else {
                u += d;
            }
        });
        if (i) {
            n -= u;
            r = Math.floor(n / a.length);
            s = Math.floor(n - r * (a.length - 1));
        }
        e(a).each(function(t, n) {
            var i = t === a.length - 1 ? s : r;
            var u = o[t];
            var c = l[t];
            var d = i - (u - c);
            if (u < i) {
                e(n).height(d);
            }
        });
    }
    function h(e) {
        e.height("");
    }
    function f(t) {
        var n = 0;
        t.find("> span").each(function(t, i) {
            var r = e(i).outerWidth();
            if (r > n) {
                n = r;
            }
        });
        n++;
        t.width(n);
        return n;
    }
    function v(e, t) {
        var n = e.add(t);
        var i;
        n.css({
            position: "relative",
            left: -1
        });
        i = e.outerHeight() - t.outerHeight();
        n.css({
            position: "",
            left: ""
        });
        return i;
    }
    n.getOuterRect = p;
    n.getClientRect = m;
    n.getContentRect = y;
    n.getScrollbarWidths = S;
    function g(t) {
        var n = t.css("position"), i = t.parents().filter(function() {
            var t = e(this);
            return /(auto|scroll)/.test(t.css("overflow") + t.css("overflow-y") + t.css("overflow-x"));
        }).eq(0);
        return n === "fixed" || !i.length ? e(t[0].ownerDocument || document) : i;
    }
    function p(e, t) {
        var n = e.offset();
        var i = n.left - (t ? t.left : 0);
        var r = n.top - (t ? t.top : 0);
        return {
            left: i,
            right: i + e.outerWidth(),
            top: r,
            bottom: r + e.outerHeight()
        };
    }
    function m(e, t) {
        var n = e.offset();
        var i = S(e);
        var r = n.left + b(e, "border-left-width") + i.left - (t ? t.left : 0);
        var s = n.top + b(e, "border-top-width") + i.top - (t ? t.top : 0);
        return {
            left: r,
            right: r + e[0].clientWidth,
            top: s,
            bottom: s + e[0].clientHeight
        };
    }
    function y(e, t) {
        var n = e.offset();
        var i = n.left + b(e, "border-left-width") + b(e, "padding-left") - (t ? t.left : 0);
        var r = n.top + b(e, "border-top-width") + b(e, "padding-top") - (t ? t.top : 0);
        return {
            left: i,
            right: i + e.width(),
            top: r,
            bottom: r + e.height()
        };
    }
    function S(e) {
        var t = e.innerWidth() - e[0].clientWidth;
        var n = {
            left: 0,
            right: 0,
            top: 0,
            bottom: e.innerHeight() - e[0].clientHeight
        };
        if (E() && e.css("direction") == "rtl") {
            n.left = t;
        } else {
            n.right = t;
        }
        return n;
    }
    var w = null;
    function E() {
        if (w === null) {
            w = D();
        }
        return w;
    }
    function D() {
        var t = e("<div><div/></div>").css({
            position: "absolute",
            top: -1e3,
            left: 0,
            border: 0,
            padding: 0,
            overflow: "scroll",
            direction: "rtl"
        }).appendTo("body");
        var n = t.children();
        var i = n.offset().left > t.offset().left;
        t.remove();
        return i;
    }
    function b(e, t) {
        return parseFloat(e.css(t)) || 0;
    }
    n.preventDefault = I;
    function H(e) {
        return e.which == 1 && !e.ctrlKey;
    }
    function T(e) {
        if (e.pageX !== undefined) {
            return e.pageX;
        }
        var t = e.originalEvent.touches;
        if (t) {
            return t[0].pageX;
        }
    }
    function C(e) {
        if (e.pageY !== undefined) {
            return e.pageY;
        }
        var t = e.originalEvent.touches;
        if (t) {
            return t[0].pageY;
        }
    }
    function R(e) {
        return /^touch/.test(e.type);
    }
    function x(e) {
        e.addClass("fc-unselectable").on("selectstart", I);
    }
    function I(e) {
        e.preventDefault();
    }
    function k(e) {
        if (window.addEventListener) {
            window.addEventListener("scroll", e, true);
            return true;
        }
        return false;
    }
    function M(e) {
        if (window.removeEventListener) {
            window.removeEventListener("scroll", e, true);
            return true;
        }
        return false;
    }
    n.intersectRects = L;
    function L(e, t) {
        var n = {
            left: Math.max(e.left, t.left),
            right: Math.min(e.right, t.right),
            top: Math.max(e.top, t.top),
            bottom: Math.min(e.bottom, t.bottom)
        };
        if (n.left < n.right && n.top < n.bottom) {
            return n;
        }
        return false;
    }
    function z(e, t) {
        return {
            left: Math.min(Math.max(e.left, t.left), t.right),
            top: Math.min(Math.max(e.top, t.top), t.bottom)
        };
    }
    function F(e) {
        return {
            left: (e.left + e.right) / 2,
            top: (e.top + e.bottom) / 2
        };
    }
    function B(e, t) {
        return {
            left: e.left - t.left,
            top: e.top - t.top
        };
    }
    n.parseFieldSpecs = N;
    n.compareByFieldSpecs = O;
    n.compareByFieldSpec = G;
    n.flexibleCompare = A;
    function N(t) {
        var n = [];
        var i = [];
        var r, s;
        if (typeof t === "string") {
            i = t.split(/\s*,\s*/);
        } else if (typeof t === "function") {
            i = [ t ];
        } else if (e.isArray(t)) {
            i = t;
        }
        for (r = 0; r < i.length; r++) {
            s = i[r];
            if (typeof s === "string") {
                n.push(s.charAt(0) == "-" ? {
                    field: s.substring(1),
                    order: -1
                } : {
                    field: s,
                    order: 1
                });
            } else if (typeof s === "function") {
                n.push({
                    func: s
                });
            }
        }
        return n;
    }
    function O(e, t, n) {
        var i;
        var r;
        for (i = 0; i < n.length; i++) {
            r = G(e, t, n[i]);
            if (r) {
                return r;
            }
        }
        return 0;
    }
    function G(e, t, n) {
        if (n.func) {
            return n.func(e, t);
        }
        return A(e[n.field], t[n.field]) * (n.order || 1);
    }
    function A(t, n) {
        if (!t && !n) {
            return 0;
        }
        if (n == null) {
            return -1;
        }
        if (t == null) {
            return 1;
        }
        if (e.type(t) === "string" || e.type(n) === "string") {
            return String(t).localeCompare(String(n));
        }
        return t - n;
    }
    function _(e, t) {
        var n = e.start;
        var i = e.end;
        var r = t.start;
        var s = t.end;
        var a, o;
        var l, u;
        if (i > r && n < s) {
            if (n >= r) {
                a = n.clone();
                l = true;
            } else {
                a = r.clone();
                l = false;
            }
            if (i <= s) {
                o = i.clone();
                u = true;
            } else {
                o = s.clone();
                u = false;
            }
            return {
                start: a,
                end: o,
                isStart: l,
                isEnd: u
            };
        }
    }
    n.computeIntervalUnit = U;
    n.divideRangeByDuration = q;
    n.divideDurationByDuration = $;
    n.multiplyDuration = X;
    n.durationHasTime = Q;
    var V = [ "sun", "mon", "tue", "wed", "thu", "fri", "sat" ];
    var P = [ "year", "month", "week", "day", "hour", "minute", "second", "millisecond" ];
    function Y(e, n) {
        return t.duration({
            days: e.clone().stripTime().diff(n.clone().stripTime(), "days"),
            ms: e.time() - n.time()
        });
    }
    function W(e, n) {
        return t.duration({
            days: e.clone().stripTime().diff(n.clone().stripTime(), "days")
        });
    }
    function j(e, n, i) {
        return t.duration(Math.round(e.diff(n, i, true)), i);
    }
    function U(e, t) {
        var n, i;
        var r;
        for (n = 0; n < P.length; n++) {
            i = P[n];
            r = Z(i, e, t);
            if (r >= 1 && ve(r)) {
                break;
            }
        }
        return i;
    }
    function Z(e, n, i) {
        if (i != null) {
            return i.diff(n, e, true);
        } else if (t.isDuration(n)) {
            return n.as(e);
        } else {
            return n.end.diff(n.start, e, true);
        }
    }
    function q(e, t, n) {
        var i;
        if (Q(n)) {
            return (t - e) / n;
        }
        i = n.asMonths();
        if (Math.abs(i) >= 1 && ve(i)) {
            return t.diff(e, "months", true) / i;
        }
        return t.diff(e, "days", true) / n.asDays();
    }
    function $(e, t) {
        var n, i;
        if (Q(e) || Q(t)) {
            return e / t;
        }
        n = e.asMonths();
        i = t.asMonths();
        if (Math.abs(n) >= 1 && ve(n) && Math.abs(i) >= 1 && ve(i)) {
            return n / i;
        }
        return e.asDays() / t.asDays();
    }
    function X(e, n) {
        var i;
        if (Q(e)) {
            return t.duration(e * n);
        }
        i = e.asMonths();
        if (Math.abs(i) >= 1 && ve(i)) {
            return t.duration({
                months: i * n
            });
        }
        return t.duration({
            days: e.asDays() * n
        });
    }
    function Q(e) {
        return Boolean(e.hours() || e.minutes() || e.seconds() || e.milliseconds());
    }
    function K(e) {
        return Object.prototype.toString.call(e) === "[object Date]" || e instanceof Date;
    }
    function J(e) {
        return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(e);
    }
    n.log = function() {
        var e = window.console;
        if (e && e.log) {
            return e.log.apply(e, arguments);
        }
    };
    n.warn = function() {
        var e = window.console;
        if (e && e.warn) {
            return e.warn.apply(e, arguments);
        } else {
            return n.log.apply(n, arguments);
        }
    };
    var ee = {}.hasOwnProperty;
    function te(e, t) {
        var n = {};
        var i, r;
        var s;
        var a, o;
        var l;
        if (t) {
            for (i = 0; i < t.length; i++) {
                r = t[i];
                s = [];
                for (a = e.length - 1; a >= 0; a--) {
                    o = e[a][r];
                    if (typeof o === "object") {
                        s.unshift(o);
                    } else if (o !== undefined) {
                        n[r] = o;
                        break;
                    }
                }
                if (s.length) {
                    n[r] = te(s);
                }
            }
        }
        for (i = e.length - 1; i >= 0; i--) {
            l = e[i];
            for (r in l) {
                if (!(r in n)) {
                    n[r] = l[r];
                }
            }
        }
        return n;
    }
    function ne(e) {
        var t = function() {};
        t.prototype = e;
        return new t();
    }
    function ie(e, t) {
        for (var n in e) {
            if (se(e, n)) {
                t[n] = e[n];
            }
        }
    }
    function re(e, t) {
        var n = [ "constructor", "toString", "valueOf" ];
        var i, r;
        for (i = 0; i < n.length; i++) {
            r = n[i];
            if (e[r] !== Object.prototype[r]) {
                t[r] = e[r];
            }
        }
    }
    function se(e, t) {
        return ee.call(e, t);
    }
    function ae(t) {
        return /undefined|null|boolean|number|string/.test(e.type(t));
    }
    function oe(t, n, i) {
        if (e.isFunction(t)) {
            t = [ t ];
        }
        if (t) {
            var r;
            var s;
            for (r = 0; r < t.length; r++) {
                s = t[r].apply(n, i) || s;
            }
            return s;
        }
    }
    function le() {
        for (var e = 0; e < arguments.length; e++) {
            if (arguments[e] !== undefined) {
                return arguments[e];
            }
        }
    }
    function ue(e) {
        return (e + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#039;").replace(/"/g, "&quot;").replace(/\n/g, "<br />");
    }
    function ce(e) {
        return e.replace(/&.*?;/g, "");
    }
    function de(t) {
        var n = [];
        e.each(t, function(e, t) {
            if (t != null) {
                n.push(e + ":" + t);
            }
        });
        return n.join(";");
    }
    function he(e) {
        return e.charAt(0).toUpperCase() + e.slice(1);
    }
    function fe(e, t) {
        return e - t;
    }
    function ve(e) {
        return e % 1 === 0;
    }
    function ge(e, t) {
        var n = e[t];
        return function() {
            return n.apply(e, arguments);
        };
    }
    function pe(e, t, n) {
        var i, r, s, a, o;
        var l = function() {
            var u = +new Date() - a;
            if (u < t) {
                i = setTimeout(l, t - u);
            } else {
                i = null;
                if (!n) {
                    o = e.apply(s, r);
                    s = r = null;
                }
            }
        };
        return function() {
            s = this;
            r = arguments;
            a = +new Date();
            var u = n && !i;
            if (!i) {
                i = setTimeout(l, t);
            }
            if (u) {
                o = e.apply(s, r);
                s = r = null;
            }
            return o;
        };
    }
    function me(t, n) {
        if (!t || !t.then || t.state() === "resolved") {
            return e.when(n());
        } else if (n) {
            return t.then(n);
        }
    }
    var ye = /^\s*\d{4}-\d\d$/;
    var Se = /^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;
    var we = t.fn;
    var Ee = e.extend({}, we);
    var De;
    var be;
    var He;
    n.moment = function() {
        return Te(arguments);
    };
    n.moment.utc = function() {
        var e = Te(arguments, true);
        if (e.hasTime()) {
            e.utc();
        }
        return e;
    };
    n.moment.parseZone = function() {
        return Te(arguments, true, true);
    };
    function Te(n, i, r) {
        var s = n[0];
        var a = n.length == 1 && typeof s === "string";
        var o;
        var l;
        var u;
        var c;
        if (t.isMoment(s)) {
            c = t.apply(null, n);
            Re(s, c);
        } else if (K(s) || s === undefined) {
            c = t.apply(null, n);
        } else {
            o = false;
            l = false;
            if (a) {
                if (ye.test(s)) {
                    s += "-01";
                    n = [ s ];
                    o = true;
                    l = true;
                } else if (u = Se.exec(s)) {
                    o = !u[5];
                    l = true;
                }
            } else if (e.isArray(s)) {
                l = true;
            }
            if (i || o) {
                c = t.utc.apply(t, n);
            } else {
                c = t.apply(null, n);
            }
            if (o) {
                c._ambigTime = true;
                c._ambigZone = true;
            } else if (r) {
                if (l) {
                    c._ambigZone = true;
                } else if (a) {
                    if (c.utcOffset) {
                        c.utcOffset(s);
                    } else {
                        c.zone(s);
                    }
                }
            }
        }
        c._fullCalendar = true;
        return c;
    }
    we.clone = function() {
        var e = Ee.clone.apply(this, arguments);
        Re(this, e);
        if (this._fullCalendar) {
            e._fullCalendar = true;
        }
        return e;
    };
    we.week = we.weeks = function(e) {
        var t = (this._locale || this._lang)._fullCalendar_weekCalc;
        if (e == null && typeof t === "function") {
            return t(this);
        } else if (t === "ISO") {
            return Ee.isoWeek.apply(this, arguments);
        }
        return Ee.week.apply(this, arguments);
    };
    we.time = function(e) {
        if (!this._fullCalendar) {
            return Ee.time.apply(this, arguments);
        }
        if (e == null) {
            return t.duration({
                hours: this.hours(),
                minutes: this.minutes(),
                seconds: this.seconds(),
                milliseconds: this.milliseconds()
            });
        } else {
            this._ambigTime = false;
            if (!t.isDuration(e) && !t.isMoment(e)) {
                e = t.duration(e);
            }
            var n = 0;
            if (t.isDuration(e)) {
                n = Math.floor(e.asDays()) * 24;
            }
            return this.hours(n + e.hours()).minutes(e.minutes()).seconds(e.seconds()).milliseconds(e.milliseconds());
        }
    };
    we.stripTime = function() {
        var e;
        if (!this._ambigTime) {
            e = this.toArray();
            this.utc();
            be(this, e.slice(0, 3));
            this._ambigTime = true;
            this._ambigZone = true;
        }
        return this;
    };
    we.hasTime = function() {
        return !this._ambigTime;
    };
    we.stripZone = function() {
        var e, t;
        if (!this._ambigZone) {
            e = this.toArray();
            t = this._ambigTime;
            this.utc();
            be(this, e);
            this._ambigTime = t || false;
            this._ambigZone = true;
        }
        return this;
    };
    we.hasZone = function() {
        return !this._ambigZone;
    };
    we.local = function() {
        var e = this.toArray();
        var t = this._ambigZone;
        Ee.local.apply(this, arguments);
        this._ambigTime = false;
        this._ambigZone = false;
        if (t) {
            He(this, e);
        }
        return this;
    };
    we.utc = function() {
        Ee.utc.apply(this, arguments);
        this._ambigTime = false;
        this._ambigZone = false;
        return this;
    };
    e.each([ "zone", "utcOffset" ], function(e, t) {
        if (Ee[t]) {
            we[t] = function(e) {
                if (e != null) {
                    this._ambigTime = false;
                    this._ambigZone = false;
                }
                return Ee[t].apply(this, arguments);
            };
        }
    });
    we.format = function() {
        if (this._fullCalendar && arguments[0]) {
            return ke(this, arguments[0]);
        }
        if (this._ambigTime) {
            return Ie(this, "YYYY-MM-DD");
        }
        if (this._ambigZone) {
            return Ie(this, "YYYY-MM-DD[T]HH:mm:ss");
        }
        return Ee.format.apply(this, arguments);
    };
    we.toISOString = function() {
        if (this._ambigTime) {
            return Ie(this, "YYYY-MM-DD");
        }
        if (this._ambigZone) {
            return Ie(this, "YYYY-MM-DD[T]HH:mm:ss");
        }
        return Ee.toISOString.apply(this, arguments);
    };
    we.isWithin = function(e, t) {
        var n = Ce([ this, e, t ]);
        return n[0] >= n[1] && n[0] < n[2];
    };
    we.isSame = function(e, t) {
        var i;
        if (!this._fullCalendar) {
            return Ee.isSame.apply(this, arguments);
        }
        if (t) {
            i = Ce([ this, e ], true);
            return Ee.isSame.call(i[0], i[1], t);
        } else {
            e = n.moment.parseZone(e);
            return Ee.isSame.call(this, e) && Boolean(this._ambigTime) === Boolean(e._ambigTime) && Boolean(this._ambigZone) === Boolean(e._ambigZone);
        }
    };
    e.each([ "isBefore", "isAfter" ], function(e, t) {
        we[t] = function(e, n) {
            var i;
            if (!this._fullCalendar) {
                return Ee[t].apply(this, arguments);
            }
            i = Ce([ this, e ]);
            return Ee[t].call(i[0], i[1], n);
        };
    });
    function Ce(e, i) {
        var r = false;
        var s = false;
        var a = e.length;
        var o = [];
        var l, u;
        for (l = 0; l < a; l++) {
            u = e[l];
            if (!t.isMoment(u)) {
                u = n.moment.parseZone(u);
            }
            r = r || u._ambigTime;
            s = s || u._ambigZone;
            o.push(u);
        }
        for (l = 0; l < a; l++) {
            u = o[l];
            if (!i && r && !u._ambigTime) {
                o[l] = u.clone().stripTime();
            } else if (s && !u._ambigZone) {
                o[l] = u.clone().stripZone();
            }
        }
        return o;
    }
    function Re(e, t) {
        if (e._ambigTime) {
            t._ambigTime = true;
        } else if (t._ambigTime) {
            t._ambigTime = false;
        }
        if (e._ambigZone) {
            t._ambigZone = true;
        } else if (t._ambigZone) {
            t._ambigZone = false;
        }
    }
    function xe(e, t) {
        e.year(t[0] || 0).month(t[1] || 0).date(t[2] || 0).hours(t[3] || 0).minutes(t[4] || 0).seconds(t[5] || 0).milliseconds(t[6] || 0);
    }
    De = "_d" in t() && "updateOffset" in t;
    be = De ? function(e, n) {
        e._d.setTime(Date.UTC.apply(Date, n));
        t.updateOffset(e, false);
    } : xe;
    He = De ? function(e, n) {
        e._d.setTime(+new Date(n[0] || 0, n[1] || 0, n[2] || 0, n[3] || 0, n[4] || 0, n[5] || 0, n[6] || 0));
        t.updateOffset(e, false);
    } : xe;
    function Ie(e, t) {
        return Ee.format.call(e, t);
    }
    function ke(e, t) {
        return Me(e, Ae(t));
    }
    function Me(e, t) {
        var n = "";
        var i;
        for (i = 0; i < t.length; i++) {
            n += ze(e, t[i]);
        }
        return n;
    }
    var Le = {
        t: function(e) {
            return Ie(e, "a").charAt(0);
        },
        T: function(e) {
            return Ie(e, "A").charAt(0);
        }
    };
    function ze(e, t) {
        var n;
        var i;
        if (typeof t === "string") {
            return t;
        } else if (n = t.token) {
            if (Le[n]) {
                return Le[n](e);
            }
            return Ie(e, n);
        } else if (t.maybe) {
            i = Me(e, t.maybe);
            if (i.match(/[1-9]/)) {
                return i;
            }
        }
        return "";
    }
    function Fe(e, t, i, r, s) {
        var a;
        e = n.moment.parseZone(e);
        t = n.moment.parseZone(t);
        a = (e.localeData || e.lang).call(e);
        i = a.longDateFormat(i) || i;
        r = r || " - ";
        return Be(e, t, Ae(i), r, s);
    }
    n.formatRange = Fe;
    function Be(e, t, n, i, r) {
        var s = e.clone().stripZone();
        var a = t.clone().stripZone();
        var o;
        var l;
        var u = "";
        var c;
        var d = "";
        var h;
        var f = "";
        var v = "";
        var g = "";
        for (l = 0; l < n.length; l++) {
            o = Oe(e, t, s, a, n[l]);
            if (o === false) {
                break;
            }
            u += o;
        }
        for (c = n.length - 1; c > l; c--) {
            o = Oe(e, t, s, a, n[c]);
            if (o === false) {
                break;
            }
            d = o + d;
        }
        for (h = l; h <= c; h++) {
            f += ze(e, n[h]);
            v += ze(t, n[h]);
        }
        if (f || v) {
            if (r) {
                g = v + i + f;
            } else {
                g = f + i + v;
            }
        }
        return u + g + d;
    }
    var Ne = {
        Y: "year",
        M: "month",
        D: "day",
        d: "day",
        A: "second",
        a: "second",
        T: "second",
        t: "second",
        H: "second",
        h: "second",
        m: "second",
        s: "second"
    };
    function Oe(e, t, n, i, r) {
        var s;
        var a;
        if (typeof r === "string") {
            return r;
        } else if (s = r.token) {
            a = Ne[s.charAt(0)];
            if (a && n.isSame(i, a)) {
                return Ie(e, s);
            }
        }
        return false;
    }
    var Ge = {};
    function Ae(e) {
        if (e in Ge) {
            return Ge[e];
        }
        return Ge[e] = _e(e);
    }
    function _e(e) {
        var t = [];
        var n = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g;
        var i;
        while (i = n.exec(e)) {
            if (i[1]) {
                t.push(i[1]);
            } else if (i[2]) {
                t.push({
                    maybe: _e(i[2])
                });
            } else if (i[3]) {
                t.push({
                    token: i[3]
                });
            } else if (i[5]) {
                t.push(i[5]);
            }
        }
        return t;
    }
    n.Class = Ve;
    function Ve() {}
    Ve.extend = function() {
        var e = arguments.length;
        var t;
        var n;
        for (t = 0; t < e; t++) {
            n = arguments[t];
            if (t < e - 1) {
                Ye(this, n);
            }
        }
        return Pe(this, n || {});
    };
    Ve.mixin = function(e) {
        Ye(this, e);
    };
    function Pe(e, t) {
        var n;
        if (se(t, "constructor")) {
            n = t.constructor;
        }
        if (typeof n !== "function") {
            n = t.constructor = function() {
                e.apply(this, arguments);
            };
        }
        n.prototype = ne(e.prototype);
        ie(t, n.prototype);
        re(t, n.prototype);
        ie(e, n);
        return n;
    }
    function Ye(e, t) {
        ie(t, e.prototype);
    }
    var We = n.EmitterMixin = {
        on: function(t, n) {
            var i = function(e, t) {
                return n.apply(t.context || this, t.args || []);
            };
            if (!n.guid) {
                n.guid = e.guid++;
            }
            i.guid = n.guid;
            e(this).on(t, i);
            return this;
        },
        off: function(t, n) {
            e(this).off(t, n);
            return this;
        },
        trigger: function(t) {
            var n = Array.prototype.slice.call(arguments, 1);
            e(this).triggerHandler(t, {
                args: n
            });
            return this;
        },
        triggerWith: function(t, n, i) {
            e(this).triggerHandler(t, {
                context: n,
                args: i
            });
            return this;
        }
    };
    var je = n.ListenerMixin = function() {
        var t = 0;
        var n = {
            listenerId: null,
            listenTo: function(t, n, i) {
                if (typeof n === "object") {
                    for (var r in n) {
                        if (n.hasOwnProperty(r)) {
                            this.listenTo(t, r, n[r]);
                        }
                    }
                } else if (typeof n === "string") {
                    t.on(n + "." + this.getListenerNamespace(), e.proxy(i, this));
                }
            },
            stopListeningTo: function(e, t) {
                e.off((t || "") + "." + this.getListenerNamespace());
            },
            getListenerNamespace: function() {
                if (this.listenerId == null) {
                    this.listenerId = t++;
                }
                return "_listener" + this.listenerId;
            }
        };
        return n;
    }();
    var Ue = {
        isIgnoringMouse: false,
        delayUnignoreMouse: null,
        initMouseIgnoring: function(e) {
            this.delayUnignoreMouse = pe(ge(this, "unignoreMouse"), e || 1e3);
        },
        tempIgnoreMouse: function() {
            this.isIgnoringMouse = true;
            this.delayUnignoreMouse();
        },
        unignoreMouse: function() {
            this.isIgnoringMouse = false;
        }
    };
    var Ze = Ve.extend(je, {
        isHidden: true,
        options: null,
        el: null,
        margin: 10,
        constructor: function(e) {
            this.options = e || {};
        },
        show: function() {
            if (this.isHidden) {
                if (!this.el) {
                    this.render();
                }
                this.el.show();
                this.position();
                this.isHidden = false;
                this.trigger("show");
            }
        },
        hide: function() {
            if (!this.isHidden) {
                this.el.hide();
                this.isHidden = true;
                this.trigger("hide");
            }
        },
        render: function() {
            var t = this;
            var n = this.options;
            this.el = e('<div class="fc-popover"/>').addClass(n.className || "").css({
                top: 0,
                left: 0
            }).append(n.content).appendTo(n.parentEl);
            this.el.on("click", ".fc-close", function() {
                t.hide();
            });
            if (n.autoHide) {
                this.listenTo(e(document), "mousedown", this.documentMousedown);
            }
        },
        documentMousedown: function(t) {
            if (this.el && !e(t.target).closest(this.el).length) {
                this.hide();
            }
        },
        removeElement: function() {
            this.hide();
            if (this.el) {
                this.el.remove();
                this.el = null;
            }
            this.stopListeningTo(e(document), "mousedown");
        },
        position: function() {
            var t = this.options;
            var n = this.el.offsetParent().offset();
            var i = this.el.outerWidth();
            var r = this.el.outerHeight();
            var s = e(window);
            var a = g(this.el);
            var o;
            var l;
            var u;
            var c;
            var d;
            c = t.top || 0;
            if (t.left !== undefined) {
                d = t.left;
            } else if (t.right !== undefined) {
                d = t.right - i;
            } else {
                d = 0;
            }
            if (a.is(window) || a.is(document)) {
                a = s;
                o = 0;
                l = 0;
            } else {
                u = a.offset();
                o = u.top;
                l = u.left;
            }
            o += s.scrollTop();
            l += s.scrollLeft();
            if (t.viewportConstrain !== false) {
                c = Math.min(c, o + a.outerHeight() - r - this.margin);
                c = Math.max(c, o + this.margin);
                d = Math.min(d, l + a.outerWidth() - i - this.margin);
                d = Math.max(d, l + this.margin);
            }
            this.el.css({
                top: c - n.top,
                left: d - n.left
            });
        },
        trigger: function(e) {
            if (this.options[e]) {
                this.options[e].apply(this, Array.prototype.slice.call(arguments, 1));
            }
        }
    });
    var qe = n.CoordCache = Ve.extend({
        els: null,
        forcedOffsetParentEl: null,
        origin: null,
        boundingRect: null,
        isHorizontal: false,
        isVertical: false,
        lefts: null,
        rights: null,
        tops: null,
        bottoms: null,
        constructor: function(t) {
            this.els = e(t.els);
            this.isHorizontal = t.isHorizontal;
            this.isVertical = t.isVertical;
            this.forcedOffsetParentEl = t.offsetParent ? e(t.offsetParent) : null;
        },
        build: function() {
            var e = this.forcedOffsetParentEl || this.els.eq(0).offsetParent();
            this.origin = e.offset();
            this.boundingRect = this.queryBoundingRect();
            if (this.isHorizontal) {
                this.buildElHorizontals();
            }
            if (this.isVertical) {
                this.buildElVerticals();
            }
        },
        clear: function() {
            this.origin = null;
            this.boundingRect = null;
            this.lefts = null;
            this.rights = null;
            this.tops = null;
            this.bottoms = null;
        },
        ensureBuilt: function() {
            if (!this.origin) {
                this.build();
            }
        },
        queryBoundingRect: function() {
            var e = g(this.els.eq(0));
            if (!e.is(document)) {
                return m(e);
            }
        },
        buildElHorizontals: function() {
            var t = [];
            var n = [];
            this.els.each(function(i, r) {
                var s = e(r);
                var a = s.offset().left;
                var o = s.outerWidth();
                t.push(a);
                n.push(a + o);
            });
            this.lefts = t;
            this.rights = n;
        },
        buildElVerticals: function() {
            var t = [];
            var n = [];
            this.els.each(function(i, r) {
                var s = e(r);
                var a = s.offset().top;
                var o = s.outerHeight();
                t.push(a);
                n.push(a + o);
            });
            this.tops = t;
            this.bottoms = n;
        },
        getHorizontalIndex: function(e) {
            this.ensureBuilt();
            var t = this.boundingRect;
            var n = this.lefts;
            var i = this.rights;
            var r = n.length;
            var s;
            if (!t || e >= t.left && e < t.right) {
                for (s = 0; s < r; s++) {
                    if (e >= n[s] && e < i[s]) {
                        return s;
                    }
                }
            }
        },
        getVerticalIndex: function(e) {
            this.ensureBuilt();
            var t = this.boundingRect;
            var n = this.tops;
            var i = this.bottoms;
            var r = n.length;
            var s;
            if (!t || e >= t.top && e < t.bottom) {
                for (s = 0; s < r; s++) {
                    if (e >= n[s] && e < i[s]) {
                        return s;
                    }
                }
            }
        },
        getLeftOffset: function(e) {
            this.ensureBuilt();
            return this.lefts[e];
        },
        getLeftPosition: function(e) {
            this.ensureBuilt();
            return this.lefts[e] - this.origin.left;
        },
        getRightOffset: function(e) {
            this.ensureBuilt();
            return this.rights[e];
        },
        getRightPosition: function(e) {
            this.ensureBuilt();
            return this.rights[e] - this.origin.left;
        },
        getWidth: function(e) {
            this.ensureBuilt();
            return this.rights[e] - this.lefts[e];
        },
        getTopOffset: function(e) {
            this.ensureBuilt();
            return this.tops[e];
        },
        getTopPosition: function(e) {
            this.ensureBuilt();
            return this.tops[e] - this.origin.top;
        },
        getBottomOffset: function(e) {
            this.ensureBuilt();
            return this.bottoms[e];
        },
        getBottomPosition: function(e) {
            this.ensureBuilt();
            return this.bottoms[e] - this.origin.top;
        },
        getHeight: function(e) {
            this.ensureBuilt();
            return this.bottoms[e] - this.tops[e];
        }
    });
    var $e = n.DragListener = Ve.extend(je, Ue, {
        options: null,
        subjectEl: null,
        subjectHref: null,
        originX: null,
        originY: null,
        scrollEl: null,
        isInteracting: false,
        isDistanceSurpassed: false,
        isDelayEnded: false,
        isDragging: false,
        isTouch: false,
        delay: null,
        delayTimeoutId: null,
        minDistance: null,
        handleTouchScrollProxy: null,
        constructor: function(e) {
            this.options = e || {};
            this.handleTouchScrollProxy = ge(this, "handleTouchScroll");
            this.initMouseIgnoring(500);
        },
        startInteraction: function(t, n) {
            var i = R(t);
            if (t.type === "mousedown") {
                if (this.isIgnoringMouse) {
                    return;
                } else if (!H(t)) {
                    return;
                } else {
                    t.preventDefault();
                }
            }
            if (!this.isInteracting) {
                n = n || {};
                this.delay = le(n.delay, this.options.delay, 0);
                this.minDistance = le(n.distance, this.options.distance, 0);
                this.subjectEl = this.options.subjectEl;
                this.isInteracting = true;
                this.isTouch = i;
                this.isDelayEnded = false;
                this.isDistanceSurpassed = false;
                this.originX = T(t);
                this.originY = C(t);
                this.scrollEl = g(e(t.target));
                this.bindHandlers();
                this.initAutoScroll();
                this.handleInteractionStart(t);
                this.startDelay(t);
                if (!this.minDistance) {
                    this.handleDistanceSurpassed(t);
                }
            }
        },
        handleInteractionStart: function(e) {
            this.trigger("interactionStart", e);
        },
        endInteraction: function(e, t) {
            if (this.isInteracting) {
                this.endDrag(e);
                if (this.delayTimeoutId) {
                    clearTimeout(this.delayTimeoutId);
                    this.delayTimeoutId = null;
                }
                this.destroyAutoScroll();
                this.unbindHandlers();
                this.isInteracting = false;
                this.handleInteractionEnd(e, t);
                if (this.isTouch) {
                    this.tempIgnoreMouse();
                }
            }
        },
        handleInteractionEnd: function(e, t) {
            this.trigger("interactionEnd", e, t || false);
        },
        bindHandlers: function() {
            var t = this;
            var n = 1;
            if (this.isTouch) {
                this.listenTo(e(document), {
                    touchmove: this.handleTouchMove,
                    touchend: this.endInteraction,
                    touchcancel: this.endInteraction,
                    touchstart: function(e) {
                        if (n) {
                            n--;
                        } else {
                            t.endInteraction(e, true);
                        }
                    }
                });
                if (!k(this.handleTouchScrollProxy) && this.scrollEl) {
                    this.listenTo(this.scrollEl, "scroll", this.handleTouchScroll);
                }
            } else {
                this.listenTo(e(document), {
                    mousemove: this.handleMouseMove,
                    mouseup: this.endInteraction
                });
            }
            this.listenTo(e(document), {
                selectstart: I,
                contextmenu: I
            });
        },
        unbindHandlers: function() {
            this.stopListeningTo(e(document));
            M(this.handleTouchScrollProxy);
            if (this.scrollEl) {
                this.stopListeningTo(this.scrollEl, "scroll");
            }
        },
        startDrag: function(e, t) {
            this.startInteraction(e, t);
            if (!this.isDragging) {
                this.isDragging = true;
                this.handleDragStart(e);
            }
        },
        handleDragStart: function(e) {
            this.trigger("dragStart", e);
            this.initHrefHack();
        },
        handleMove: function(e) {
            var t = T(e) - this.originX;
            var n = C(e) - this.originY;
            var i = this.minDistance;
            var r;
            if (!this.isDistanceSurpassed) {
                r = t * t + n * n;
                if (r >= i * i) {
                    this.handleDistanceSurpassed(e);
                }
            }
            if (this.isDragging) {
                this.handleDrag(t, n, e);
            }
        },
        handleDrag: function(e, t, n) {
            this.trigger("drag", e, t, n);
            this.updateAutoScroll(n);
        },
        endDrag: function(e) {
            if (this.isDragging) {
                this.isDragging = false;
                this.handleDragEnd(e);
            }
        },
        handleDragEnd: function(e) {
            this.trigger("dragEnd", e);
            this.destroyHrefHack();
        },
        startDelay: function(e) {
            var t = this;
            if (this.delay) {
                this.delayTimeoutId = setTimeout(function() {
                    t.handleDelayEnd(e);
                }, this.delay);
            } else {
                this.handleDelayEnd(e);
            }
        },
        handleDelayEnd: function(e) {
            this.isDelayEnded = true;
            if (this.isDistanceSurpassed) {
                this.startDrag(e);
            }
        },
        handleDistanceSurpassed: function(e) {
            this.isDistanceSurpassed = true;
            if (this.isDelayEnded) {
                this.startDrag(e);
            }
        },
        handleTouchMove: function(e) {
            if (this.isDragging) {
                e.preventDefault();
            }
            this.handleMove(e);
        },
        handleMouseMove: function(e) {
            this.handleMove(e);
        },
        handleTouchScroll: function(e) {
            if (!this.isDragging) {
                this.endInteraction(e, true);
            }
        },
        initHrefHack: function() {
            var e = this.subjectEl;
            if (this.subjectHref = e ? e.attr("href") : null) {
                e.removeAttr("href");
            }
        },
        destroyHrefHack: function() {
            var e = this.subjectEl;
            var t = this.subjectHref;
            setTimeout(function() {
                if (t) {
                    e.attr("href", t);
                }
            }, 0);
        },
        trigger: function(e) {
            if (this.options[e]) {
                this.options[e].apply(this, Array.prototype.slice.call(arguments, 1));
            }
            if (this["_" + e]) {
                this["_" + e].apply(this, Array.prototype.slice.call(arguments, 1));
            }
        }
    });
    $e.mixin({
        isAutoScroll: false,
        scrollBounds: null,
        scrollTopVel: null,
        scrollLeftVel: null,
        scrollIntervalId: null,
        scrollSensitivity: 30,
        scrollSpeed: 200,
        scrollIntervalMs: 50,
        initAutoScroll: function() {
            var e = this.scrollEl;
            this.isAutoScroll = this.options.scroll && e && !e.is(window) && !e.is(document);
            if (this.isAutoScroll) {
                this.listenTo(e, "scroll", pe(this.handleDebouncedScroll, 100));
            }
        },
        destroyAutoScroll: function() {
            this.endAutoScroll();
            if (this.isAutoScroll) {
                this.stopListeningTo(this.scrollEl, "scroll");
            }
        },
        computeScrollBounds: function() {
            if (this.isAutoScroll) {
                this.scrollBounds = p(this.scrollEl);
            }
        },
        updateAutoScroll: function(e) {
            var t = this.scrollSensitivity;
            var n = this.scrollBounds;
            var i, r;
            var s, a;
            var o = 0;
            var l = 0;
            if (n) {
                i = (t - (C(e) - n.top)) / t;
                r = (t - (n.bottom - C(e))) / t;
                s = (t - (T(e) - n.left)) / t;
                a = (t - (n.right - T(e))) / t;
                if (i >= 0 && i <= 1) {
                    o = i * this.scrollSpeed * -1;
                } else if (r >= 0 && r <= 1) {
                    o = r * this.scrollSpeed;
                }
                if (s >= 0 && s <= 1) {
                    l = s * this.scrollSpeed * -1;
                } else if (a >= 0 && a <= 1) {
                    l = a * this.scrollSpeed;
                }
            }
            this.setScrollVel(o, l);
        },
        setScrollVel: function(e, t) {
            this.scrollTopVel = e;
            this.scrollLeftVel = t;
            this.constrainScrollVel();
            if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {
                this.scrollIntervalId = setInterval(ge(this, "scrollIntervalFunc"), this.scrollIntervalMs);
            }
        },
        constrainScrollVel: function() {
            var e = this.scrollEl;
            if (this.scrollTopVel < 0) {
                if (e.scrollTop() <= 0) {
                    this.scrollTopVel = 0;
                }
            } else if (this.scrollTopVel > 0) {
                if (e.scrollTop() + e[0].clientHeight >= e[0].scrollHeight) {
                    this.scrollTopVel = 0;
                }
            }
            if (this.scrollLeftVel < 0) {
                if (e.scrollLeft() <= 0) {
                    this.scrollLeftVel = 0;
                }
            } else if (this.scrollLeftVel > 0) {
                if (e.scrollLeft() + e[0].clientWidth >= e[0].scrollWidth) {
                    this.scrollLeftVel = 0;
                }
            }
        },
        scrollIntervalFunc: function() {
            var e = this.scrollEl;
            var t = this.scrollIntervalMs / 1e3;
            if (this.scrollTopVel) {
                e.scrollTop(e.scrollTop() + this.scrollTopVel * t);
            }
            if (this.scrollLeftVel) {
                e.scrollLeft(e.scrollLeft() + this.scrollLeftVel * t);
            }
            this.constrainScrollVel();
            if (!this.scrollTopVel && !this.scrollLeftVel) {
                this.endAutoScroll();
            }
        },
        endAutoScroll: function() {
            if (this.scrollIntervalId) {
                clearInterval(this.scrollIntervalId);
                this.scrollIntervalId = null;
                this.handleScrollEnd();
            }
        },
        handleDebouncedScroll: function() {
            if (!this.scrollIntervalId) {
                this.handleScrollEnd();
            }
        },
        handleScrollEnd: function() {}
    });
    var Xe = $e.extend({
        component: null,
        origHit: null,
        hit: null,
        coordAdjust: null,
        constructor: function(e, t) {
            $e.call(this, t);
            this.component = e;
        },
        handleInteractionStart: function(e) {
            var t = this.subjectEl;
            var n;
            var i;
            var r;
            this.computeCoords();
            if (e) {
                i = {
                    left: T(e),
                    top: C(e)
                };
                r = i;
                if (t) {
                    n = p(t);
                    r = z(r, n);
                }
                this.origHit = this.queryHit(r.left, r.top);
                if (t && this.options.subjectCenter) {
                    if (this.origHit) {
                        n = L(this.origHit, n) || n;
                    }
                    r = F(n);
                }
                this.coordAdjust = B(r, i);
            } else {
                this.origHit = null;
                this.coordAdjust = null;
            }
            $e.prototype.handleInteractionStart.apply(this, arguments);
        },
        computeCoords: function() {
            this.component.prepareHits();
            this.computeScrollBounds();
        },
        handleDragStart: function(e) {
            var t;
            $e.prototype.handleDragStart.apply(this, arguments);
            t = this.queryHit(T(e), C(e));
            if (t) {
                this.handleHitOver(t);
            }
        },
        handleDrag: function(e, t, n) {
            var i;
            $e.prototype.handleDrag.apply(this, arguments);
            i = this.queryHit(T(n), C(n));
            if (!Qe(i, this.hit)) {
                if (this.hit) {
                    this.handleHitOut();
                }
                if (i) {
                    this.handleHitOver(i);
                }
            }
        },
        handleDragEnd: function() {
            this.handleHitDone();
            $e.prototype.handleDragEnd.apply(this, arguments);
        },
        handleHitOver: function(e) {
            var t = Qe(e, this.origHit);
            this.hit = e;
            this.trigger("hitOver", this.hit, t, this.origHit);
        },
        handleHitOut: function() {
            if (this.hit) {
                this.trigger("hitOut", this.hit);
                this.handleHitDone();
                this.hit = null;
            }
        },
        handleHitDone: function() {
            if (this.hit) {
                this.trigger("hitDone", this.hit);
            }
        },
        handleInteractionEnd: function() {
            $e.prototype.handleInteractionEnd.apply(this, arguments);
            this.origHit = null;
            this.hit = null;
            this.component.releaseHits();
        },
        handleScrollEnd: function() {
            $e.prototype.handleScrollEnd.apply(this, arguments);
            this.computeCoords();
        },
        queryHit: function(e, t) {
            if (this.coordAdjust) {
                e += this.coordAdjust.left;
                t += this.coordAdjust.top;
            }
            return this.component.queryHit(e, t);
        }
    });
    function Qe(e, t) {
        if (!e && !t) {
            return true;
        }
        if (e && t) {
            return e.component === t.component && Ke(e, t) && Ke(t, e);
        }
        return false;
    }
    function Ke(e, t) {
        for (var n in e) {
            if (!/^(component|left|right|top|bottom)$/.test(n)) {
                if (e[n] !== t[n]) {
                    return false;
                }
            }
        }
        return true;
    }
    var Je = Ve.extend(je, {
        options: null,
        sourceEl: null,
        el: null,
        parentEl: null,
        top0: null,
        left0: null,
        y0: null,
        x0: null,
        topDelta: null,
        leftDelta: null,
        isFollowing: false,
        isHidden: false,
        isAnimating: false,
        constructor: function(t, n) {
            this.options = n = n || {};
            this.sourceEl = t;
            this.parentEl = n.parentEl ? e(n.parentEl) : t.parent();
        },
        start: function(t) {
            if (!this.isFollowing) {
                this.isFollowing = true;
                this.y0 = C(t);
                this.x0 = T(t);
                this.topDelta = 0;
                this.leftDelta = 0;
                if (!this.isHidden) {
                    this.updatePosition();
                }
                if (R(t)) {
                    this.listenTo(e(document), "touchmove", this.handleMove);
                } else {
                    this.listenTo(e(document), "mousemove", this.handleMove);
                }
            }
        },
        stop: function(t, n) {
            var i = this;
            var r = this.options.revertDuration;
            function s() {
                this.isAnimating = false;
                i.removeElement();
                this.top0 = this.left0 = null;
                if (n) {
                    n();
                }
            }
            if (this.isFollowing && !this.isAnimating) {
                this.isFollowing = false;
                this.stopListeningTo(e(document));
                if (t && r && !this.isHidden) {
                    this.isAnimating = true;
                    this.el.animate({
                        top: this.top0,
                        left: this.left0
                    }, {
                        duration: r,
                        complete: s
                    });
                } else {
                    s();
                }
            }
        },
        getEl: function() {
            var e = this.el;
            if (!e) {
                this.sourceEl.width();
                e = this.el = this.sourceEl.clone().addClass(this.options.additionalClass || "").css({
                    position: "absolute",
                    visibility: "",
                    display: this.isHidden ? "none" : "",
                    margin: 0,
                    right: "auto",
                    bottom: "auto",
                    width: this.sourceEl.width(),
                    height: this.sourceEl.height(),
                    opacity: this.options.opacity || "",
                    zIndex: this.options.zIndex
                });
                e.addClass("fc-unselectable");
                e.appendTo(this.parentEl);
            }
            return e;
        },
        removeElement: function() {
            if (this.el) {
                this.el.remove();
                this.el = null;
            }
        },
        updatePosition: function() {
            var e;
            var t;
            this.getEl();
            if (this.top0 === null) {
                this.sourceEl.width();
                e = this.sourceEl.offset();
                t = this.el.offsetParent().offset();
                this.top0 = e.top - t.top;
                this.left0 = e.left - t.left;
            }
            this.el.css({
                top: this.top0 + this.topDelta,
                left: this.left0 + this.leftDelta
            });
        },
        handleMove: function(e) {
            this.topDelta = C(e) - this.y0;
            this.leftDelta = T(e) - this.x0;
            if (!this.isHidden) {
                this.updatePosition();
            }
        },
        hide: function() {
            if (!this.isHidden) {
                this.isHidden = true;
                if (this.el) {
                    this.el.hide();
                }
            }
        },
        show: function() {
            if (this.isHidden) {
                this.isHidden = false;
                this.updatePosition();
                this.getEl().show();
            }
        }
    });
    var et = n.Grid = Ve.extend(je, Ue, {
        view: null,
        isRTL: null,
        start: null,
        end: null,
        el: null,
        elsByFill: null,
        eventTimeFormat: null,
        displayEventTime: null,
        displayEventEnd: null,
        minResizeDuration: null,
        largeUnit: null,
        dayDragListener: null,
        segDragListener: null,
        segResizeListener: null,
        externalDragListener: null,
        constructor: function(e) {
            this.view = e;
            this.isRTL = e.opt("isRTL");
            this.elsByFill = {};
            this.dayDragListener = this.buildDayDragListener();
            this.initMouseIgnoring();
        },
        computeEventTimeFormat: function() {
            return this.view.opt("smallTimeFormat");
        },
        computeDisplayEventTime: function() {
            return true;
        },
        computeDisplayEventEnd: function() {
            return true;
        },
        setRange: function(e) {
            this.start = e.start.clone();
            this.end = e.end.clone();
            this.rangeUpdated();
            this.processRangeOptions();
        },
        rangeUpdated: function() {},
        processRangeOptions: function() {
            var e = this.view;
            var t;
            var n;
            this.eventTimeFormat = e.opt("eventTimeFormat") || e.opt("timeFormat") || this.computeEventTimeFormat();
            t = e.opt("displayEventTime");
            if (t == null) {
                t = this.computeDisplayEventTime();
            }
            n = e.opt("displayEventEnd");
            if (n == null) {
                n = this.computeDisplayEventEnd();
            }
            this.displayEventTime = t;
            this.displayEventEnd = n;
        },
        spanToSegs: function(e) {},
        diffDates: function(e, t) {
            if (this.largeUnit) {
                return j(e, t, this.largeUnit);
            } else {
                return Y(e, t);
            }
        },
        prepareHits: function() {},
        releaseHits: function() {},
        queryHit: function(e, t) {},
        getHitSpan: function(e) {},
        getHitEl: function(e) {},
        setElement: function(e) {
            this.el = e;
            x(e);
            this.bindDayHandler("touchstart", this.dayTouchStart);
            this.bindDayHandler("mousedown", this.dayMousedown);
            this.bindSegHandlers();
            this.bindGlobalHandlers();
        },
        bindDayHandler: function(t, n) {
            var i = this;
            this.el.on(t, function(t) {
                if (!e(t.target).is(".fc-event-container *, .fc-more") && !e(t.target).closest(".fc-popover").length) {
                    return n.call(i, t);
                }
            });
        },
        removeElement: function() {
            this.unbindGlobalHandlers();
            this.clearDragListeners();
            this.el.remove();
        },
        renderSkeleton: function() {},
        renderDates: function() {},
        unrenderDates: function() {},
        bindGlobalHandlers: function() {
            this.listenTo(e(document), {
                dragstart: this.externalDragStart,
                sortstart: this.externalDragStart
            });
        },
        unbindGlobalHandlers: function() {
            this.stopListeningTo(e(document));
        },
        dayMousedown: function(e) {
            if (!this.isIgnoringMouse) {
                this.dayDragListener.startInteraction(e, {});
            }
        },
        dayTouchStart: function(e) {
            var t = this.view;
            if (t.isSelected || t.selectedEvent) {
                this.tempIgnoreMouse();
            }
            this.dayDragListener.startInteraction(e, {
                delay: this.view.opt("longPressDelay")
            });
        },
        buildDayDragListener: function() {
            var e = this;
            var t = this.view;
            var n = t.opt("selectable");
            var i;
            var r;
            var s = new Xe(this, {
                scroll: t.opt("dragScroll"),
                interactionStart: function() {
                    i = s.origHit;
                },
                dragStart: function() {
                    t.unselect();
                },
                hitOver: function(t, s, a) {
                    if (a) {
                        if (!s) {
                            i = null;
                        }
                        if (n) {
                            r = e.computeSelection(e.getHitSpan(a), e.getHitSpan(t));
                            if (r) {
                                e.renderSelection(r);
                            } else if (r === false) {
                                u();
                            }
                        }
                    }
                },
                hitOut: function() {
                    i = null;
                    r = null;
                    e.unrenderSelection();
                    c();
                },
                interactionEnd: function(n, s) {
                    if (!s) {
                        if (i && !e.isIgnoringMouse) {
                            t.triggerDayClick(e.getHitSpan(i), e.getHitEl(i), n);
                        }
                        if (r) {
                            t.reportSelection(r, n);
                        }
                        c();
                    }
                }
            });
            return s;
        },
        clearDragListeners: function() {
            this.dayDragListener.endInteraction();
            if (this.segDragListener) {
                this.segDragListener.endInteraction();
            }
            if (this.segResizeListener) {
                this.segResizeListener.endInteraction();
            }
            if (this.externalDragListener) {
                this.externalDragListener.endInteraction();
            }
        },
        renderEventLocationHelper: function(e, t) {
            var n = this.fabricateHelperEvent(e, t);
            return this.renderHelper(n, t);
        },
        fabricateHelperEvent: function(e, t) {
            var n = t ? ne(t.event) : {};
            n.start = e.start.clone();
            n.end = e.end ? e.end.clone() : null;
            n.allDay = null;
            this.view.calendar.normalizeEventDates(n);
            n.className = (n.className || []).concat("fc-helper");
            if (!t) {
                n.editable = false;
            }
            return n;
        },
        renderHelper: function(e, t) {},
        unrenderHelper: function() {},
        renderSelection: function(e) {
            this.renderHighlight(e);
        },
        unrenderSelection: function() {
            this.unrenderHighlight();
        },
        computeSelection: function(e, t) {
            var n = this.computeSelectionSpan(e, t);
            if (n && !this.view.calendar.isSelectionSpanAllowed(n)) {
                return false;
            }
            return n;
        },
        computeSelectionSpan: function(e, t) {
            var n = [ e.start, e.end, t.start, t.end ];
            n.sort(fe);
            return {
                start: n[0].clone(),
                end: n[3].clone()
            };
        },
        renderHighlight: function(e) {
            this.renderFill("highlight", this.spanToSegs(e));
        },
        unrenderHighlight: function() {
            this.unrenderFill("highlight");
        },
        highlightSegClasses: function() {
            return [ "fc-highlight" ];
        },
        renderBusinessHours: function() {},
        unrenderBusinessHours: function() {},
        getNowIndicatorUnit: function() {},
        renderNowIndicator: function(e) {},
        unrenderNowIndicator: function() {},
        renderFill: function(e, t) {},
        unrenderFill: function(e) {
            var t = this.elsByFill[e];
            if (t) {
                t.remove();
                delete this.elsByFill[e];
            }
        },
        renderFillSegEls: function(t, n) {
            var i = this;
            var r = this[t + "SegEl"];
            var s = "";
            var a = [];
            var o;
            if (n.length) {
                for (o = 0; o < n.length; o++) {
                    s += this.fillSegHtml(t, n[o]);
                }
                e(s).each(function(t, s) {
                    var o = n[t];
                    var l = e(s);
                    if (r) {
                        l = r.call(i, o, l);
                    }
                    if (l) {
                        l = e(l);
                        if (l.is(i.fillSegTag)) {
                            o.el = l;
                            a.push(o);
                        }
                    }
                });
            }
            return a;
        },
        fillSegTag: "div",
        fillSegHtml: function(e, t) {
            var n = this[e + "SegClasses"];
            var i = this[e + "SegCss"];
            var r = n ? n.call(this, t) : [];
            var s = de(i ? i.call(this, t) : {});
            return "<" + this.fillSegTag + (r.length ? ' class="' + r.join(" ") + '"' : "") + (s ? ' style="' + s + '"' : "") + " />";
        },
        getDayClasses: function(e) {
            var t = this.view;
            var n = t.calendar.getNow();
            var i = [ "fc-" + V[e.day()] ];
            if (t.intervalDuration.as("months") == 1 && e.month() != t.intervalStart.month()) {
                i.push("fc-other-month");
            }
            if (e.isSame(n, "day")) {
                i.push("fc-today", t.highlightStateClass);
            } else if (e < n) {
                i.push("fc-past");
            } else {
                i.push("fc-future");
            }
            return i;
        }
    });
    et.mixin({
        mousedOverSeg: null,
        isDraggingSeg: false,
        isResizingSeg: false,
        isDraggingExternal: false,
        segs: null,
        renderEvents: function(e) {
            var t = [];
            var n = [];
            var i;
            for (i = 0; i < e.length; i++) {
                (tt(e[i]) ? t : n).push(e[i]);
            }
            this.segs = [].concat(this.renderBgEvents(t), this.renderFgEvents(n));
        },
        renderBgEvents: function(e) {
            var t = this.eventsToSegs(e);
            return this.renderBgSegs(t) || t;
        },
        renderFgEvents: function(e) {
            var t = this.eventsToSegs(e);
            return this.renderFgSegs(t) || t;
        },
        unrenderEvents: function() {
            this.handleSegMouseout();
            this.clearDragListeners();
            this.unrenderFgSegs();
            this.unrenderBgSegs();
            this.segs = null;
        },
        getEventSegs: function() {
            return this.segs || [];
        },
        renderFgSegs: function(e) {},
        unrenderFgSegs: function() {},
        renderFgSegEls: function(t, n) {
            var i = this.view;
            var r = "";
            var s = [];
            var a;
            if (t.length) {
                for (a = 0; a < t.length; a++) {
                    r += this.fgSegHtml(t[a], n);
                }
                e(r).each(function(n, r) {
                    var a = t[n];
                    var o = i.resolveEventEl(a.event, e(r));
                    if (o) {
                        o.data("fc-seg", a);
                        a.el = o;
                        s.push(a);
                    }
                });
            }
            return s;
        },
        fgSegHtml: function(e, t) {},
        renderBgSegs: function(e) {
            return this.renderFill("bgEvent", e);
        },
        unrenderBgSegs: function() {
            this.unrenderFill("bgEvent");
        },
        bgEventSegEl: function(e, t) {
            return this.view.resolveEventEl(e.event, t);
        },
        bgEventSegClasses: function(e) {
            var t = e.event;
            var n = t.source || {};
            return [ "fc-bgevent" ].concat(t.className, n.className || []);
        },
        bgEventSegCss: function(e) {
            return {
                "background-color": this.getSegSkinCss(e)["background-color"]
            };
        },
        businessHoursSegClasses: function(e) {
            return [ "fc-nonbusiness", "fc-bgevent" ];
        },
        bindSegHandlers: function() {
            this.bindSegHandler("touchstart", this.handleSegTouchStart);
            this.bindSegHandler("touchend", this.handleSegTouchEnd);
            this.bindSegHandler("mouseenter", this.handleSegMouseover);
            this.bindSegHandler("mouseleave", this.handleSegMouseout);
            this.bindSegHandler("mousedown", this.handleSegMousedown);
            this.bindSegHandler("click", this.handleSegClick);
        },
        bindSegHandler: function(t, n) {
            var i = this;
            this.el.on(t, ".fc-event-container > *", function(t) {
                var r = e(this).data("fc-seg");
                if (r && !i.isDraggingSeg && !i.isResizingSeg) {
                    return n.call(i, r, t);
                }
            });
        },
        handleSegClick: function(e, t) {
            return this.view.trigger("eventClick", e.el[0], e.event, t);
        },
        handleSegMouseover: function(e, t) {
            if (!this.isIgnoringMouse && !this.mousedOverSeg) {
                this.mousedOverSeg = e;
                e.el.addClass("fc-allow-mouse-resize");
                this.view.trigger("eventMouseover", e.el[0], e.event, t);
            }
        },
        handleSegMouseout: function(e, t) {
            t = t || {};
            if (this.mousedOverSeg) {
                e = e || this.mousedOverSeg;
                this.mousedOverSeg = null;
                e.el.removeClass("fc-allow-mouse-resize");
                this.view.trigger("eventMouseout", e.el[0], e.event, t);
            }
        },
        handleSegMousedown: function(e, t) {
            var n = this.startSegResize(e, t, {
                distance: 5
            });
            if (!n && this.view.isEventDraggable(e.event)) {
                this.buildSegDragListener(e).startInteraction(t, {
                    distance: 5
                });
            }
        },
        handleSegTouchStart: function(e, t) {
            var n = this.view;
            var i = e.event;
            var r = n.isEventSelected(i);
            var s = n.isEventDraggable(i);
            var a = n.isEventResizable(i);
            var o = false;
            var l;
            if (r && a) {
                o = this.startSegResize(e, t);
            }
            if (!o && (s || a)) {
                l = s ? this.buildSegDragListener(e) : this.buildSegSelectListener(e);
                l.startInteraction(t, {
                    delay: r ? 0 : this.view.opt("longPressDelay")
                });
            }
            this.tempIgnoreMouse();
        },
        handleSegTouchEnd: function(e, t) {
            this.tempIgnoreMouse();
        },
        startSegResize: function(t, n, i) {
            if (e(n.target).is(".fc-resizer")) {
                this.buildSegResizeListener(t, e(n.target).is(".fc-start-resizer")).startInteraction(n, i);
                return true;
            }
            return false;
        },
        buildSegDragListener: function(e) {
            var t = this;
            var n = this.view;
            var i = n.calendar;
            var r = e.el;
            var s = e.event;
            var a;
            var o;
            var l;
            if (this.segDragListener) {
                return this.segDragListener;
            }
            var d = this.segDragListener = new Xe(n, {
                scroll: n.opt("dragScroll"),
                subjectEl: r,
                subjectCenter: true,
                interactionStart: function(t) {
                    a = false;
                    o = new Je(e.el, {
                        additionalClass: "fc-dragging",
                        parentEl: n.el,
                        opacity: d.isTouch ? null : n.opt("dragOpacity"),
                        revertDuration: n.opt("dragRevertDuration"),
                        zIndex: 2
                    });
                    o.hide();
                    o.start(t);
                },
                dragStart: function(i) {
                    if (d.isTouch && !n.isEventSelected(s)) {
                        n.selectEvent(s);
                    }
                    a = true;
                    t.handleSegMouseout(e, i);
                    t.segDragStart(e, i);
                    n.hideEvent(s);
                },
                hitOver: function(r, a, c) {
                    var h;
                    if (e.hit) {
                        c = e.hit;
                    }
                    l = t.computeEventDrop(c.component.getHitSpan(c), r.component.getHitSpan(r), s);
                    if (l && !i.isEventSpanAllowed(t.eventToSpan(l), s)) {
                        u();
                        l = null;
                    }
                    if (l && (h = n.renderDrag(l, e))) {
                        h.addClass("fc-dragging");
                        if (!d.isTouch) {
                            t.applyDragOpacity(h);
                        }
                        o.hide();
                    } else {
                        o.show();
                    }
                    if (a) {
                        l = null;
                    }
                },
                hitOut: function() {
                    n.unrenderDrag();
                    o.show();
                    l = null;
                },
                hitDone: function() {
                    c();
                },
                interactionEnd: function(i) {
                    o.stop(!l, function() {
                        if (a) {
                            n.unrenderDrag();
                            n.showEvent(s);
                            t.segDragStop(e, i);
                        }
                        if (l) {
                            n.reportEventDrop(s, l, this.largeUnit, r, i);
                        }
                    });
                    t.segDragListener = null;
                }
            });
            return d;
        },
        buildSegSelectListener: function(e) {
            var t = this;
            var n = this.view;
            var i = e.event;
            if (this.segDragListener) {
                return this.segDragListener;
            }
            var r = this.segDragListener = new $e({
                dragStart: function(e) {
                    if (r.isTouch && !n.isEventSelected(i)) {
                        n.selectEvent(i);
                    }
                },
                interactionEnd: function(e) {
                    t.segDragListener = null;
                }
            });
            return r;
        },
        segDragStart: function(e, t) {
            this.isDraggingSeg = true;
            this.view.trigger("eventDragStart", e.el[0], e.event, t, {});
        },
        segDragStop: function(e, t) {
            this.isDraggingSeg = false;
            this.view.trigger("eventDragStop", e.el[0], e.event, t, {});
        },
        computeEventDrop: function(e, t, n) {
            var i = this.view.calendar;
            var r = e.start;
            var s = t.start;
            var a;
            var o;
            if (r.hasTime() === s.hasTime()) {
                a = this.diffDates(s, r);
                if (n.allDay && Q(a)) {
                    o = {
                        start: n.start.clone(),
                        end: i.getEventEnd(n),
                        allDay: false
                    };
                    i.normalizeEventTimes(o);
                } else {
                    o = {
                        start: n.start.clone(),
                        end: n.end ? n.end.clone() : null,
                        allDay: n.allDay
                    };
                }
                o.start.add(a);
                if (o.end) {
                    o.end.add(a);
                }
            } else {
                o = {
                    start: s.clone(),
                    end: null,
                    allDay: !s.hasTime()
                };
            }
            return o;
        },
        applyDragOpacity: function(e) {
            var t = this.view.opt("dragOpacity");
            if (t != null) {
                e.each(function(e, n) {
                    n.style.opacity = t;
                });
            }
        },
        externalDragStart: function(t, n) {
            var i = this.view;
            var r;
            var s;
            if (i.opt("droppable")) {
                r = e((n ? n.item : null) || t.target);
                s = i.opt("dropAccept");
                if (e.isFunction(s) ? s.call(r[0], r) : r.is(s)) {
                    if (!this.isDraggingExternal) {
                        this.listenToExternalDrag(r, t, n);
                    }
                }
            }
        },
        listenToExternalDrag: function(e, t, n) {
            var i = this;
            var r = this.view.calendar;
            var s = at(e);
            var a;
            var o = i.externalDragListener = new Xe(this, {
                interactionStart: function() {
                    i.isDraggingExternal = true;
                },
                hitOver: function(e) {
                    a = i.computeExternalDrop(e.component.getHitSpan(e), s);
                    if (a && !r.isExternalSpanAllowed(i.eventToSpan(a), a, s.eventProps)) {
                        u();
                        a = null;
                    }
                    if (a) {
                        i.renderDrag(a);
                    }
                },
                hitOut: function() {
                    a = null;
                },
                hitDone: function() {
                    c();
                    i.unrenderDrag();
                },
                interactionEnd: function(t) {
                    if (a) {
                        i.view.reportExternalDrop(s, a, e, t, n);
                    }
                    i.isDraggingExternal = false;
                    i.externalDragListener = null;
                }
            });
            o.startDrag(t);
        },
        computeExternalDrop: function(e, t) {
            var n = this.view.calendar;
            var i = {
                start: n.applyTimezone(e.start),
                end: null
            };
            if (t.startTime && !i.start.hasTime()) {
                i.start.time(t.startTime);
            }
            if (t.duration) {
                i.end = i.start.clone().add(t.duration);
            }
            return i;
        },
        renderDrag: function(e, t) {},
        unrenderDrag: function() {},
        buildSegResizeListener: function(e, t) {
            var n = this;
            var i = this.view;
            var r = i.calendar;
            var s = e.el;
            var a = e.event;
            var o = r.getEventEnd(a);
            var l;
            var d;
            var h = this.segResizeListener = new Xe(this, {
                scroll: i.opt("dragScroll"),
                subjectEl: s,
                interactionStart: function() {
                    l = false;
                },
                dragStart: function(t) {
                    l = true;
                    n.handleSegMouseout(e, t);
                    n.segResizeStart(e, t);
                },
                hitOver: function(s, l, c) {
                    var h = n.getHitSpan(c);
                    var f = n.getHitSpan(s);
                    d = t ? n.computeEventStartResize(h, f, a) : n.computeEventEndResize(h, f, a);
                    if (d) {
                        if (!r.isEventSpanAllowed(n.eventToSpan(d), a)) {
                            u();
                            d = null;
                        } else if (d.start.isSame(a.start) && d.end.isSame(o)) {
                            d = null;
                        }
                    }
                    if (d) {
                        i.hideEvent(a);
                        n.renderEventResize(d, e);
                    }
                },
                hitOut: function() {
                    d = null;
                },
                hitDone: function() {
                    n.unrenderEventResize();
                    i.showEvent(a);
                    c();
                },
                interactionEnd: function(t) {
                    if (l) {
                        n.segResizeStop(e, t);
                    }
                    if (d) {
                        i.reportEventResize(a, d, this.largeUnit, s, t);
                    }
                    n.segResizeListener = null;
                }
            });
            return h;
        },
        segResizeStart: function(e, t) {
            this.isResizingSeg = true;
            this.view.trigger("eventResizeStart", e.el[0], e.event, t, {});
        },
        segResizeStop: function(e, t) {
            this.isResizingSeg = false;
            this.view.trigger("eventResizeStop", e.el[0], e.event, t, {});
        },
        computeEventStartResize: function(e, t, n) {
            return this.computeEventResize("start", e, t, n);
        },
        computeEventEndResize: function(e, t, n) {
            return this.computeEventResize("end", e, t, n);
        },
        computeEventResize: function(e, t, n, i) {
            var r = this.view.calendar;
            var s = this.diffDates(n[e], t[e]);
            var a;
            var o;
            a = {
                start: i.start.clone(),
                end: r.getEventEnd(i),
                allDay: i.allDay
            };
            if (a.allDay && Q(s)) {
                a.allDay = false;
                r.normalizeEventTimes(a);
            }
            a[e].add(s);
            if (!a.start.isBefore(a.end)) {
                o = this.minResizeDuration || (i.allDay ? r.defaultAllDayEventDuration : r.defaultTimedEventDuration);
                if (e == "start") {
                    a.start = a.end.clone().subtract(o);
                } else {
                    a.end = a.start.clone().add(o);
                }
            }
            return a;
        },
        renderEventResize: function(e, t) {},
        unrenderEventResize: function() {},
        getEventTimeText: function(e, t, n) {
            if (t == null) {
                t = this.eventTimeFormat;
            }
            if (n == null) {
                n = this.displayEventEnd;
            }
            if (this.displayEventTime && e.start.hasTime()) {
                if (n && e.end) {
                    return this.view.formatRange(e, t);
                } else {
                    return e.start.format(t);
                }
            }
            return "";
        },
        getSegClasses: function(e, t, n) {
            var i = this.view;
            var r = e.event;
            var s = [ "fc-event", e.isStart ? "fc-start" : "fc-not-start", e.isEnd ? "fc-end" : "fc-not-end" ].concat(r.className, r.source ? r.source.className : []);
            if (t) {
                s.push("fc-draggable");
            }
            if (n) {
                s.push("fc-resizable");
            }
            if (i.isEventSelected(r)) {
                s.push("fc-selected");
            }
            return s;
        },
        getSegSkinCss: function(e) {
            var t = e.event;
            var n = this.view;
            var i = t.source || {};
            var r = t.color;
            var s = i.color;
            var a = n.opt("eventColor");
            return {
                "background-color": t.backgroundColor || r || i.backgroundColor || s || n.opt("eventBackgroundColor") || a,
                "border-color": t.borderColor || r || i.borderColor || s || n.opt("eventBorderColor") || a,
                color: t.textColor || i.textColor || n.opt("eventTextColor")
            };
        },
        eventToSegs: function(e) {
            return this.eventsToSegs([ e ]);
        },
        eventToSpan: function(e) {
            return this.eventToSpans(e)[0];
        },
        eventToSpans: function(e) {
            var t = this.eventToRange(e);
            return this.eventRangeToSpans(t, e);
        },
        eventsToSegs: function(t, n) {
            var i = this;
            var r = rt(t);
            var s = [];
            e.each(r, function(e, t) {
                var r = [];
                var a;
                for (a = 0; a < t.length; a++) {
                    r.push(i.eventToRange(t[a]));
                }
                if (nt(t[0])) {
                    if (t[0].businessHoursMode!='multi') {
                        r = i.invertRanges(r);
                    }
                    for (a = 0; a < r.length; a++) {
                        s.push.apply(s, i.eventRangeToSegs(r[a], t[0], n));
                    }
                } else {
                    for (a = 0; a < r.length; a++) {
                        s.push.apply(s, i.eventRangeToSegs(r[a], t[a], n));
                    }
                }
            });
            return s;
        },
        eventToRange: function(e) {
            return {
                start: e.start.clone().stripZone(),
                end: (e.end ? e.end.clone() : this.view.calendar.getDefaultEventEnd(e.allDay != null ? e.allDay : !e.start.hasTime(), e.start)).stripZone()
            };
        },
        eventRangeToSegs: function(e, t, n) {
            var i = this.eventRangeToSpans(e, t);
            var r = [];
            var s;
            for (s = 0; s < i.length; s++) {
                r.push.apply(r, this.eventSpanToSegs(i[s], t, n));
            }
            return r;
        },
        eventRangeToSpans: function(t, n) {
            return [ e.extend({}, t) ];
        },
        eventSpanToSegs: function(e, t, n) {
            var i = n ? n(e) : this.spanToSegs(e);
            var r, s;
            for (r = 0; r < i.length; r++) {
                s = i[r];
                s.event = t;
                s.eventStartMS = +e.start;
                s.eventDurationMS = e.end - e.start;
            }
            return i;
        },
        invertRangesMulti: function(e) {
            return e;
        },
        invertRanges: function(e) {
            var n = this.view;
            var i = n.start.clone();
            var r = n.end.clone();
            var s = [];
            var a = i;
            var o, l;
            e.sort(st);
            for (o = 0; o < e.length; o++) {
                l = e[o];
                if (l.start > a) {
                    s.push({
                        start: t.utc(l.start.format("YYYY-MM-DD 00:00:00")),
                        end: l.start
                    });
                }
                a = l.end;
            }
            if (a < r) {
                s.push({
                    start: a,
                    end: t.utc(l.start.format("YYYY-MM-DD 24:00:00"))
                });
            }
            return s;
        },
        sortEventSegs: function(e) {
            e.sort(ge(this, "compareEventSegs"));
        },
        compareEventSegs: function(e, t) {
            return e.eventStartMS - t.eventStartMS || t.eventDurationMS - e.eventDurationMS || t.event.allDay - e.event.allDay || O(e.event, t.event, this.view.eventOrderSpecs);
        }
    });
    function tt(e) {
        var t = it(e);
        return t === "background" || t === "inverse-background";
    }
    n.isBgEvent = tt;
    function nt(e) {
        return it(e) === "inverse-background";
    }
    function it(e) {
        return le((e.source || {}).rendering, e.rendering);
    }
    function rt(e) {
        var t = {};
        var n, i;
        for (n = 0; n < e.length; n++) {
            i = e[n];
            (t[i._id] || (t[i._id] = [])).push(i);
        }
        return t;
    }
    function st(e, t) {
        return e.start - t.start;
    }
    n.dataAttrPrefix = "";
    function at(i) {
        var r = n.dataAttrPrefix;
        var s;
        var a;
        var o;
        var l;
        if (r) {
            r += "-";
        }
        s = i.data(r + "event") || null;
        if (s) {
            if (typeof s === "object") {
                s = e.extend({}, s);
            } else {
                s = {};
            }
            a = s.start;
            if (a == null) {
                a = s.time;
            }
            o = s.duration;
            l = s.stick;
            delete s.start;
            delete s.time;
            delete s.duration;
            delete s.stick;
        }
        if (a == null) {
            a = i.data(r + "start");
        }
        if (a == null) {
            a = i.data(r + "time");
        }
        if (o == null) {
            o = i.data(r + "duration");
        }
        if (l == null) {
            l = i.data(r + "stick");
        }
        a = a != null ? t.duration(a) : null;
        o = o != null ? t.duration(o) : null;
        l = Boolean(l);
        return {
            eventProps: s,
            startTime: a,
            duration: o,
            stick: l
        };
    }
    var ot = n.DayTableMixin = {
        breakOnWeeks: false,
        dayDates: null,
        dayIndices: null,
        daysPerRow: null,
        rowCnt: null,
        colCnt: null,
        colHeadFormat: null,
        updateDayTable: function() {
            var e = this.view;
            var t = this.start.clone();
            var n = -1;
            var i = [];
            var r = [];
            var s;
            var a;
            var o;
            while (t.isBefore(this.end)) {
                if (e.isHiddenDay(t)) {
                    i.push(n + .5);
                } else {
                    n++;
                    i.push(n);
                    r.push(t.clone());
                }
                t.add(1, "days");
            }
            if (this.breakOnWeeks) {
                a = r[0].day();
                for (s = 1; s < r.length; s++) {
                    if (r[s].day() == a) {
                        break;
                    }
                }
                o = Math.ceil(r.length / s);
            } else {
                o = 1;
                s = r.length;
            }
            this.dayDates = r;
            this.dayIndices = i;
            this.daysPerRow = s;
            this.rowCnt = o;
            this.updateDayTableCols();
        },
        updateDayTableCols: function() {
            this.colCnt = this.computeColCnt();
            this.colHeadFormat = this.view.opt("columnFormat") || this.computeColHeadFormat();
        },
        computeColCnt: function() {
            return this.daysPerRow;
        },
        getCellDate: function(e, t) {
            return this.dayDates[this.getCellDayIndex(e, t)].clone();
        },
        getCellRange: function(e, t) {
            var n = this.getCellDate(e, t);
            var i = n.clone().add(1, "days");
            return {
                start: n,
                end: i
            };
        },
        getCellDayIndex: function(e, t) {
            return e * this.daysPerRow + this.getColDayIndex(t);
        },
        getColDayIndex: function(e) {
            if (this.isRTL) {
                return this.colCnt - 1 - e;
            } else {
                return e;
            }
        },
        getDateDayIndex: function(e) {
            var t = this.dayIndices;
            var n = e.diff(this.start, "days");
            if (n < 0) {
                return t[0] - 1;
            } else if (n >= t.length) {
                return t[t.length - 1] + 1;
            } else {
                return t[n];
            }
        },
        computeColHeadFormat: function() {
            if (this.rowCnt > 1 || this.colCnt > 10) {
                return "ddd";
            } else if (this.colCnt > 1) {
                return this.view.opt("dayOfMonthFormat");
            } else {
                return "dddd";
            }
        },
        sliceRangeByRow: function(e) {
            var t = this.daysPerRow;
            var n = this.view.computeDayRange(e);
            var i = this.getDateDayIndex(n.start);
            var r = this.getDateDayIndex(n.end.clone().subtract(1, "days"));
            var s = [];
            var a;
            var o, l;
            var u, c;
            for (a = 0; a < this.rowCnt; a++) {
                o = a * t;
                l = o + t - 1;
                u = Math.max(i, o);
                c = Math.min(r, l);
                u = Math.ceil(u);
                c = Math.floor(c);
                if (u <= c) {
                    s.push({
                        row: a,
                        firstRowDayIndex: u - o,
                        lastRowDayIndex: c - o,
                        isStart: u === i,
                        isEnd: c === r
                    });
                }
            }
            return s;
        },
        sliceRangeByDay: function(e) {
            var t = this.daysPerRow;
            var n = this.view.computeDayRange(e);
            var i = this.getDateDayIndex(n.start);
            var r = this.getDateDayIndex(n.end.clone().subtract(1, "days"));
            var s = [];
            var a;
            var o, l;
            var u;
            var c, d;
            for (a = 0; a < this.rowCnt; a++) {
                o = a * t;
                l = o + t - 1;
                for (u = o; u <= l; u++) {
                    c = Math.max(i, u);
                    d = Math.min(r, u);
                    c = Math.ceil(c);
                    d = Math.floor(d);
                    if (c <= d) {
                        s.push({
                            row: a,
                            firstRowDayIndex: c - o,
                            lastRowDayIndex: d - o,
                            isStart: c === i,
                            isEnd: d === r
                        });
                    }
                }
            }
            return s;
        },
        renderHeadHtml: function() {
            var e = this.view;
            return "" + '<div class="fc-row ' + e.widgetHeaderClass + '">' + "<table>" + "<thead>" + this.renderHeadTrHtml() + "</thead>" + "</table>" + "</div>";
        },
        renderHeadIntroHtml: function() {
            return this.renderIntroHtml();
        },
        renderHeadTrHtml: function() {
            return "" + "<tr>" + (this.isRTL ? "" : this.renderHeadIntroHtml()) + this.renderHeadDateCellsHtml() + (this.isRTL ? this.renderHeadIntroHtml() : "") + "</tr>";
        },
        renderHeadDateCellsHtml: function() {
            var e = [];
            var t, n;
            for (t = 0; t < this.colCnt; t++) {
                n = this.getCellDate(0, t);
                e.push(this.renderHeadDateCellHtml(n));
            }
            return e.join("");
        },
        renderHeadDateCellHtml: function(e, t, n) {
            var i = this.view;
            return "" + '<th class="fc-day-header ' + i.widgetHeaderClass + " fc-" + V[e.day()] + '"' + (this.rowCnt == 1 ? ' data-date="' + e.format("YYYY-MM-DD") + '"' : "") + (t > 1 ? ' colspan="' + t + '"' : "") + (n ? " " + n : "") + ">" + ue(e.format(this.colHeadFormat)) + "</th>";
        },
        renderBgTrHtml: function(e) {
            return "" + "<tr>" + (this.isRTL ? "" : this.renderBgIntroHtml(e)) + this.renderBgCellsHtml(e) + (this.isRTL ? this.renderBgIntroHtml(e) : "") + "</tr>";
        },
        renderBgIntroHtml: function(e) {
            return this.renderIntroHtml();
        },
        renderBgCellsHtml: function(e) {
            var t = [];
            var n, i;
            for (n = 0; n < this.colCnt; n++) {
                i = this.getCellDate(e, n);
                t.push(this.renderBgCellHtml(i));
            }
            return t.join("");
        },
        renderBgCellHtml: function(e, t) {
            var n = this.view;
            var i = this.getDayClasses(e);
            i.unshift("fc-day", n.widgetContentClass);
            return '<td class="' + i.join(" ") + '"' + ' data-date="' + e.format("YYYY-MM-DD") + '"' + (t ? " " + t : "") + "></td>";
        },
        renderIntroHtml: function() {},
        bookendCells: function(e) {
            var t = this.renderIntroHtml();
            if (t) {
                if (this.isRTL) {
                    e.append(t);
                } else {
                    e.prepend(t);
                }
            }
        }
    };
    var lt = n.DayGrid = et.extend(ot, {
        numbersVisible: false,
        bottomCoordPadding: 0,
        rowEls: null,
        cellEls: null,
        helperEls: null,
        rowCoordCache: null,
        colCoordCache: null,
        renderDates: function(e) {
            var t = this.view;
            var n = this.rowCnt;
            var i = this.colCnt;
            var r = "";
            var s;
            var a;
            for (s = 0; s < n; s++) {
                r += this.renderDayRowHtml(s, e);
            }
            this.el.html(r);
            this.rowEls = this.el.find(".fc-row");
            this.cellEls = this.el.find(".fc-day");
            this.rowCoordCache = new qe({
                els: this.rowEls,
                isVertical: true
            });
            this.colCoordCache = new qe({
                els: this.cellEls.slice(0, this.colCnt),
                isHorizontal: true
            });
            for (s = 0; s < n; s++) {
                for (a = 0; a < i; a++) {
                    t.trigger("dayRender", null, this.getCellDate(s, a), this.getCellEl(s, a));
                }
            }
        },
        unrenderDates: function() {
            this.removeSegPopover();
        },
        renderBusinessHours: function() {
            var e = this.view.calendar.getBusinessHoursEvents(true);
            var t = this.eventsToSegs(e);
            this.renderFill("businessHours", t, "bgevent");
        },
        unrenderBusinessHours: function() {
            this.unrenderFill("businessHours");
        },
        renderDayRowHtml: function(e, t) {
            var n = this.view;
            var i = [ "fc-row", "fc-week", n.widgetContentClass ];
            if (t) {
                i.push("fc-rigid");
            }
            return "" + '<div class="' + i.join(" ") + '">' + '<div class="fc-bg">' + "<table>" + this.renderBgTrHtml(e) + "</table>" + "</div>" + '<div class="fc-content-skeleton">' + "<table>" + (this.numbersVisible ? "<thead>" + this.renderNumberTrHtml(e) + "</thead>" : "") + "</table>" + "</div>" + "</div>";
        },
        renderNumberTrHtml: function(e) {
            return "" + "<tr>" + (this.isRTL ? "" : this.renderNumberIntroHtml(e)) + this.renderNumberCellsHtml(e) + (this.isRTL ? this.renderNumberIntroHtml(e) : "") + "</tr>";
        },
        renderNumberIntroHtml: function(e) {
            return this.renderIntroHtml();
        },
        renderNumberCellsHtml: function(e) {
            var t = [];
            var n, i;
            for (n = 0; n < this.colCnt; n++) {
                i = this.getCellDate(e, n);
                t.push(this.renderNumberCellHtml(i));
            }
            return t.join("");
        },
        renderNumberCellHtml: function(e) {
            var t;
            if (!this.view.dayNumbersVisible) {
                return "<td/>";
            }
            t = this.getDayClasses(e);
            t.unshift("fc-day-number");
            return "" + '<td class="' + t.join(" ") + '" data-date="' + e.format() + '">' + e.date() + "</td>";
        },
        computeEventTimeFormat: function() {
            return this.view.opt("extraSmallTimeFormat");
        },
        computeDisplayEventEnd: function() {
            return this.colCnt == 1;
        },
        rangeUpdated: function() {
            this.updateDayTable();
        },
        spanToSegs: function(e) {
            var t = this.sliceRangeByRow(e);
            var n, i;
            for (n = 0; n < t.length; n++) {
                i = t[n];
                if (this.isRTL) {
                    i.leftCol = this.daysPerRow - 1 - i.lastRowDayIndex;
                    i.rightCol = this.daysPerRow - 1 - i.firstRowDayIndex;
                } else {
                    i.leftCol = i.firstRowDayIndex;
                    i.rightCol = i.lastRowDayIndex;
                }
            }
            return t;
        },
        prepareHits: function() {
            this.colCoordCache.build();
            this.rowCoordCache.build();
            this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding;
        },
        releaseHits: function() {
            this.colCoordCache.clear();
            this.rowCoordCache.clear();
        },
        queryHit: function(e, t) {
            var n = this.colCoordCache.getHorizontalIndex(e);
            var i = this.rowCoordCache.getVerticalIndex(t);
            if (i != null && n != null) {
                return this.getCellHit(i, n);
            }
        },
        getHitSpan: function(e) {
            return this.getCellRange(e.row, e.col);
        },
        getHitEl: function(e) {
            return this.getCellEl(e.row, e.col);
        },
        getCellHit: function(e, t) {
            return {
                row: e,
                col: t,
                component: this,
                left: this.colCoordCache.getLeftOffset(t),
                right: this.colCoordCache.getRightOffset(t),
                top: this.rowCoordCache.getTopOffset(e),
                bottom: this.rowCoordCache.getBottomOffset(e)
            };
        },
        getCellEl: function(e, t) {
            return this.cellEls.eq(e * this.colCnt + t);
        },
        renderDrag: function(e, t) {
            this.renderHighlight(this.eventToSpan(e));
            if (t && !t.el.closest(this.el).length) {
                return this.renderEventLocationHelper(e, t);
            }
        },
        unrenderDrag: function() {
            this.unrenderHighlight();
            this.unrenderHelper();
        },
        renderEventResize: function(e, t) {
            this.renderHighlight(this.eventToSpan(e));
            return this.renderEventLocationHelper(e, t);
        },
        unrenderEventResize: function() {
            this.unrenderHighlight();
            this.unrenderHelper();
        },
        renderHelper: function(t, n) {
            var i = [];
            var r = this.eventToSegs(t);
            var s;
            r = this.renderFgSegEls(r);
            s = this.renderSegRows(r);
            this.rowEls.each(function(t, r) {
                var a = e(r);
                var o = e('<div class="fc-helper-skeleton"><table/></div>');
                var l;
                if (n && n.row === t) {
                    l = n.el.position().top;
                } else {
                    l = a.find(".fc-content-skeleton tbody").position().top;
                }
                o.css("top", l).find("table").append(s[t].tbodyEl);
                a.append(o);
                i.push(o[0]);
            });
            return this.helperEls = e(i);
        },
        unrenderHelper: function() {
            if (this.helperEls) {
                this.helperEls.remove();
                this.helperEls = null;
            }
        },
        fillSegTag: "td",
        renderFill: function(t, n, i) {
            var r = [];
            var s, a;
            var o;
            n = this.renderFillSegEls(t, n);
            for (s = 0; s < n.length; s++) {
                a = n[s];
                o = this.renderFillRow(t, a, i);
                this.rowEls.eq(a.row).append(o);
                r.push(o[0]);
            }
            this.elsByFill[t] = e(r);
            return n;
        },
        renderFillRow: function(t, n, i) {
            var r = this.colCnt;
            var s = n.leftCol;
            var a = n.rightCol + 1;
            var o;
            var l;
            i = i || t.toLowerCase();
            o = e('<div class="fc-' + i + '-skeleton">' + "<table><tr/></table>" + "</div>");
            l = o.find("tr");
            if (s > 0) {
                l.append('<td colspan="' + s + '"/>');
            }
            l.append(n.el.attr("colspan", a - s));
            if (a < r) {
                l.append('<td colspan="' + (r - a) + '"/>');
            }
            this.bookendCells(l);
            return o;
        }
    });
    lt.mixin({
        rowStructs: null,
        unrenderEvents: function() {
            this.removeSegPopover();
            et.prototype.unrenderEvents.apply(this, arguments);
        },
        getEventSegs: function() {
            return et.prototype.getEventSegs.call(this).concat(this.popoverSegs || []);
        },
        renderBgSegs: function(t) {
            var n = e.grep(t, function(e) {
                return e.event.allDay;
            });
            return et.prototype.renderBgSegs.call(this, n);
        },
        renderFgSegs: function(t) {
            var n;
            t = this.renderFgSegEls(t);
            n = this.rowStructs = this.renderSegRows(t);
            this.rowEls.each(function(t, i) {
                e(i).find(".fc-content-skeleton > table").append(n[t].tbodyEl);
            });
            return t;
        },
        unrenderFgSegs: function() {
            var e = this.rowStructs || [];
            var t;
            while (t = e.pop()) {
                t.tbodyEl.remove();
            }
            this.rowStructs = null;
        },
        renderSegRows: function(e) {
            var t = [];
            var n;
            var i;
            n = this.groupSegRows(e);
            for (i = 0; i < n.length; i++) {
                t.push(this.renderSegRow(i, n[i]));
            }
            return t;
        },
        fgSegHtml: function(e, t) {
            var n = this.view;
            var i = e.event;
            var r = n.isEventDraggable(i);
            var s = !t && i.allDay && e.isStart && n.isEventResizableFromStart(i);
            var a = !t && i.allDay && e.isEnd && n.isEventResizableFromEnd(i);
            var o = this.getSegClasses(e, r, s || a);
            var l = de(this.getSegSkinCss(e));
            var u = "";
            var c;
            var d;
            o.unshift("fc-day-grid-event", "fc-h-event");
            if (e.isStart) {
                c = this.getEventTimeText(i);
                if (c) {
                    u = '<span class="fc-time">' + ue(c) + "</span>";
                }
            }
            d = '<span class="fc-title">' + (ue(i.title || "") || "&nbsp;") + "</span>";
            return '<a class="' + o.join(" ") + '"' + (i.url ? ' href="' + ue(i.url) + '"' : "") + (l ? ' style="' + l + '"' : "") + ">" + '<div class="fc-content">' + (this.isRTL ? d + " " + u : u + " " + d) + "</div>" + (s ? '<div class="fc-resizer fc-start-resizer" />' : "") + (a ? '<div class="fc-resizer fc-end-resizer" />' : "") + "</a>";
        },
        renderSegRow: function(t, n) {
            var i = this.colCnt;
            var r = this.buildSegLevels(n);
            var s = Math.max(1, r.length);
            var a = e("<tbody/>");
            var o = [];
            var l = [];
            var u = [];
            var c, d;
            var h;
            var f;
            var v, g;
            var p;
            function m(t) {
                while (h < t) {
                    p = (u[c - 1] || [])[h];
                    if (p) {
                        p.attr("rowspan", parseInt(p.attr("rowspan") || 1, 10) + 1);
                    } else {
                        p = e("<td/>");
                        f.append(p);
                    }
                    l[c][h] = p;
                    u[c][h] = p;
                    h++;
                }
            }
            for (c = 0; c < s; c++) {
                d = r[c];
                h = 0;
                f = e("<tr/>");
                o.push([]);
                l.push([]);
                u.push([]);
                if (d) {
                    for (v = 0; v < d.length; v++) {
                        g = d[v];
                        m(g.leftCol);
                        p = e('<td class="fc-event-container"/>').append(g.el);
                        if (g.leftCol != g.rightCol) {
                            p.attr("colspan", g.rightCol - g.leftCol + 1);
                        } else {
                            u[c][h] = p;
                        }
                        while (h <= g.rightCol) {
                            l[c][h] = p;
                            o[c][h] = g;
                            h++;
                        }
                        f.append(p);
                    }
                }
                m(i);
                this.bookendCells(f);
                a.append(f);
            }
            return {
                row: t,
                tbodyEl: a,
                cellMatrix: l,
                segMatrix: o,
                segLevels: r,
                segs: n
            };
        },
        buildSegLevels: function(e) {
            var t = [];
            var n, i;
            var r;
            this.sortEventSegs(e);
            for (n = 0; n < e.length; n++) {
                i = e[n];
                for (r = 0; r < t.length; r++) {
                    if (!ut(i, t[r])) {
                        break;
                    }
                }
                i.level = r;
                (t[r] || (t[r] = [])).push(i);
            }
            for (r = 0; r < t.length; r++) {
                t[r].sort(ct);
            }
            return t;
        },
        groupSegRows: function(e) {
            var t = [];
            var n;
            for (n = 0; n < this.rowCnt; n++) {
                t.push([]);
            }
            for (n = 0; n < e.length; n++) {
                t[e[n].row].push(e[n]);
            }
            return t;
        }
    });
    function ut(e, t) {
        var n, i;
        for (n = 0; n < t.length; n++) {
            i = t[n];
            if (i.leftCol <= e.rightCol && i.rightCol >= e.leftCol) {
                return true;
            }
        }
        return false;
    }
    function ct(e, t) {
        return e.leftCol - t.leftCol;
    }
    lt.mixin({
        segPopover: null,
        popoverSegs: null,
        removeSegPopover: function() {
            if (this.segPopover) {
                this.segPopover.hide();
            }
        },
        limitRows: function(e) {
            var t = this.rowStructs || [];
            var n;
            var i;
            for (n = 0; n < t.length; n++) {
                this.unlimitRow(n);
                if (!e) {
                    i = false;
                } else if (typeof e === "number") {
                    i = e;
                } else {
                    i = this.computeRowLevelLimit(n);
                }
                if (i !== false) {
                    this.limitRow(n, i);
                }
            }
        },
        computeRowLevelLimit: function(t) {
            var n = this.rowEls.eq(t);
            var i = n.height();
            var r = this.rowStructs[t].tbodyEl.children();
            var s, a;
            var o;
            function l(t, n) {
                o = Math.max(o, e(n).outerHeight());
            }
            for (s = 0; s < r.length; s++) {
                a = r.eq(s).removeClass("fc-limited");
                o = 0;
                a.find("> td > :first-child").each(l);
                if (a.position().top + o > i) {
                    return s;
                }
            }
            return false;
        },
        limitRow: function(t, n) {
            var i = this;
            var r = this.rowStructs[t];
            var s = [];
            var a = 0;
            var o;
            var l;
            var u;
            var c, d;
            var h;
            var f;
            var v;
            var g, p;
            var m;
            var y;
            var S, w, E;
            function D(r) {
                while (a < r) {
                    h = i.getCellSegs(t, a, n);
                    if (h.length) {
                        g = l[n - 1][a];
                        E = i.renderMoreLink(t, a, h);
                        w = e("<div/>").append(E);
                        g.append(w);
                        s.push(w[0]);
                    }
                    a++;
                }
            }
            if (n && n < r.segLevels.length) {
                o = r.segLevels[n - 1];
                l = r.cellMatrix;
                u = r.tbodyEl.children().slice(n).addClass("fc-limited").get();
                for (c = 0; c < o.length; c++) {
                    d = o[c];
                    D(d.leftCol);
                    v = [];
                    f = 0;
                    while (a <= d.rightCol) {
                        h = this.getCellSegs(t, a, n);
                        v.push(h);
                        f += h.length;
                        a++;
                    }
                    if (f) {
                        g = l[n - 1][d.leftCol];
                        p = g.attr("rowspan") || 1;
                        m = [];
                        for (y = 0; y < v.length; y++) {
                            S = e('<td class="fc-more-cell"/>').attr("rowspan", p);
                            h = v[y];
                            E = this.renderMoreLink(t, d.leftCol + y, [ d ].concat(h));
                            w = e("<div/>").append(E);
                            S.append(w);
                            m.push(S[0]);
                            s.push(S[0]);
                        }
                        g.addClass("fc-limited").after(e(m));
                        u.push(g[0]);
                    }
                }
                D(this.colCnt);
                r.moreEls = e(s);
                r.limitedEls = e(u);
            }
        },
        unlimitRow: function(e) {
            var t = this.rowStructs[e];
            if (t.moreEls) {
                t.moreEls.remove();
                t.moreEls = null;
            }
            if (t.limitedEls) {
                t.limitedEls.removeClass("fc-limited");
                t.limitedEls = null;
            }
        },
        renderMoreLink: function(t, n, i) {
            var r = this;
            var s = this.view;
            return e('<a class="fc-more"/>').text(this.getMoreLinkText(i.length)).on("click", function(a) {
                var o = s.opt("eventLimitClick");
                var l = r.getCellDate(t, n);
                var u = e(this);
                var c = r.getCellEl(t, n);
                var d = r.getCellSegs(t, n);
                var h = r.resliceDaySegs(d, l);
                var f = r.resliceDaySegs(i, l);
                if (typeof o === "function") {
                    o = s.trigger("eventLimitClick", null, {
                        date: l,
                        dayEl: c,
                        moreEl: u,
                        segs: h,
                        hiddenSegs: f
                    }, a);
                }
                if (o === "popover") {
                    r.showSegPopover(t, n, u, h);
                } else if (typeof o === "string") {
                    s.calendar.zoomTo(l, o);
                }
            });
        },
        showSegPopover: function(e, t, n, i) {
            var r = this;
            var s = this.view;
            var a = n.parent();
            var o;
            var l;
            if (this.rowCnt == 1) {
                o = s.el;
            } else {
                o = this.rowEls.eq(e);
            }
            l = {
                className: "fc-more-popover",
                content: this.renderSegPopoverContent(e, t, i),
                parentEl: this.el,
                top: o.offset().top,
                autoHide: true,
                viewportConstrain: s.opt("popoverViewportConstrain"),
                hide: function() {
                    r.segPopover.removeElement();
                    r.segPopover = null;
                    r.popoverSegs = null;
                }
            };
            if (this.isRTL) {
                l.right = a.offset().left + a.outerWidth() + 1;
            } else {
                l.left = a.offset().left - 1;
            }
            this.segPopover = new Ze(l);
            this.segPopover.show();
        },
        renderSegPopoverContent: function(t, n, i) {
            var r = this.view;
            var s = r.opt("theme");
            var a = this.getCellDate(t, n).format(r.opt("dayPopoverFormat"));
            var o = e('<div class="fc-header ' + r.widgetHeaderClass + '">' + '<span class="fc-close ' + (s ? "ui-icon ui-icon-closethick" : "fc-icon fc-icon-x") + '"></span>' + '<span class="fc-title">' + ue(a) + "</span>" + '<div class="fc-clear"/>' + "</div>" + '<div class="fc-body ' + r.widgetContentClass + '">' + '<div class="fc-event-container"></div>' + "</div>");
            var l = o.find(".fc-event-container");
            var u;
            i = this.renderFgSegEls(i, true);
            this.popoverSegs = i;
            for (u = 0; u < i.length; u++) {
                this.prepareHits();
                i[u].hit = this.getCellHit(t, n);
                this.releaseHits();
                l.append(i[u].el);
            }
            return o;
        },
        resliceDaySegs: function(t, n) {
            var i = e.map(t, function(e) {
                return e.event;
            });
            var r = n.clone();
            var s = r.clone().add(1, "days");
            var a = {
                start: r,
                end: s
            };
            t = this.eventsToSegs(i, function(e) {
                var t = _(e, a);
                return t ? [ t ] : [];
            });
            this.sortEventSegs(t);
            return t;
        },
        getMoreLinkText: function(e) {
            var t = this.view.opt("eventLimitText");
            if (typeof t === "function") {
                return t(e);
            } else {
                return "+" + e + " " + t;
            }
        },
        getCellSegs: function(e, t, n) {
            var i = this.rowStructs[e].segMatrix;
            var r = n || 0;
            var s = [];
            var a;
            while (r < i.length) {
                a = i[r][t];
                if (a) {
                    s.push(a);
                }
                r++;
            }
            return s;
        }
    });
    var dt = n.TimeGrid = et.extend(ot, {
        slotDuration: null,
        snapDuration: null,
        snapsPerSlot: null,
        minTime: null,
        maxTime: null,
        labelFormat: null,
        labelInterval: null,
        colEls: null,
        slatContainerEl: null,
        slatEls: null,
        nowIndicatorEls: null,
        colCoordCache: null,
        slatCoordCache: null,
        constructor: function() {
            et.apply(this, arguments);
            this.processOptions();
        },
        renderDates: function() {
            this.el.html(this.renderHtml());
            this.colEls = this.el.find(".fc-day");
            this.slatContainerEl = this.el.find(".fc-slats");
            this.slatEls = this.slatContainerEl.find("tr");
            this.colCoordCache = new qe({
                els: this.colEls,
                isHorizontal: true
            });
            this.slatCoordCache = new qe({
                els: this.slatEls,
                isVertical: true
            });
            this.renderContentSkeleton();
        },
        renderHtml: function() {
            return "" + '<div class="fc-bg">' + "<table>" + this.renderBgTrHtml(0) + "</table>" + "</div>" + '<div class="fc-slats">' + "<table>" + this.renderSlatRowHtml() + "</table>" + "</div>";
        },
        renderSlatRowHtml: function() {
            var e = this.view;
            var n = this.isRTL;
            var i = "";
            var r = t.duration(+this.minTime);
            var s;
            var a;
            var o;
            while (r < this.maxTime) {
                s = this.start.clone().time(r);
                a = ve($(r, this.labelInterval));
                o = '<td class="fc-axis fc-time ' + e.widgetContentClass + '" ' + e.axisStyleAttr() + ">" + (a ? "<span>" + ue(s.format(this.labelFormat)) + "</span>" : "") + "</td>";
                i += '<tr data-time="' + s.format("HH:mm:ss") + '"' + (a ? "" : ' class="fc-minor"') + ">" + (!n ? o : "") + '<td class="' + e.widgetContentClass + '"/>' + (n ? o : "") + "</tr>";
                r.add(this.slotDuration);
            }
            return i;
        },
        processOptions: function() {
            var n = this.view;
            var i = n.opt("slotDuration");
            var r = n.opt("snapDuration");
            var s;
            i = t.duration(i);
            r = r ? t.duration(r) : i;
            this.slotDuration = i;
            this.snapDuration = r;
            this.snapsPerSlot = i / r;
            this.minResizeDuration = r;
            this.minTime = t.duration(n.opt("minTime"));
            this.maxTime = t.duration(n.opt("maxTime"));
            s = n.opt("slotLabelFormat");
            if (e.isArray(s)) {
                s = s[s.length - 1];
            }
            this.labelFormat = s || n.opt("axisFormat") || n.opt("smallTimeFormat");
            s = n.opt("slotLabelInterval");
            this.labelInterval = s ? t.duration(s) : this.computeLabelInterval(i);
        },
        computeLabelInterval: function(e) {
            var n;
            var i;
            var r;
            for (n = At.length - 1; n >= 0; n--) {
                i = t.duration(At[n]);
                r = $(i, e);
                if (ve(r) && r > 1) {
                    return i;
                }
            }
            return t.duration(e);
        },
        computeEventTimeFormat: function() {
            return this.view.opt("noMeridiemTimeFormat");
        },
        computeDisplayEventEnd: function() {
            return true;
        },
        prepareHits: function() {
            this.colCoordCache.build();
            this.slatCoordCache.build();
        },
        releaseHits: function() {
            this.colCoordCache.clear();
        },
        queryHit: function(e, t) {
            var n = this.snapsPerSlot;
            var i = this.colCoordCache;
            var r = this.slatCoordCache;
            var s = i.getHorizontalIndex(e);
            var a = r.getVerticalIndex(t);
            if (s != null && a != null) {
                var o = r.getTopOffset(a);
                var l = r.getHeight(a);
                var u = (t - o) / l;
                var c = Math.floor(u * n);
                var d = a * n + c;
                var h = o + c / n * l;
                var f = o + (c + 1) / n * l;
                return {
                    col: s,
                    snap: d,
                    component: this,
                    left: i.getLeftOffset(s),
                    right: i.getRightOffset(s),
                    top: h,
                    bottom: f
                };
            }
        },
        getHitSpan: function(e) {
            var t = this.getCellDate(0, e.col);
            var n = this.computeSnapTime(e.snap);
            var i;
            t.time(n);
            i = t.clone().add(this.snapDuration);
            return {
                start: t,
                end: i
            };
        },
        getHitEl: function(e) {
            return this.colEls.eq(e.col);
        },
        rangeUpdated: function() {
            this.updateDayTable();
        },
        computeSnapTime: function(e) {
            return t.duration(this.minTime + this.snapDuration * e);
        },
        spanToSegs: function(e) {
            var t = this.sliceRangeByTimes(e);
            var n;
            for (n = 0; n < t.length; n++) {
                if (this.isRTL) {
                    t[n].col = this.daysPerRow - 1 - t[n].dayIndex;
                } else {
                    t[n].col = t[n].dayIndex;
                }
            }
            return t;
        },
        sliceRangeByTimes: function(e) {
            var t = [];
            var n;
            var i;
            var r;
            var s;
            for (i = 0; i < this.daysPerRow; i++) {
                r = this.dayDates[i].clone();
                s = {
                    start: r.clone().time(this.minTime),
                    end: r.clone().time(this.maxTime)
                };
                n = _(e, s);
                if (n) {
                    n.dayIndex = i;
                    t.push(n);
                }
            }
            return t;
        },
        updateSize: function(e) {
            this.slatCoordCache.build();
            if (e) {
                this.updateSegVerticals([].concat(this.fgSegs || [], this.bgSegs || [], this.businessSegs || []));
            }
        },
        getTotalSlatHeight: function() {
            return this.slatContainerEl.outerHeight();
        },
        computeDateTop: function(e, n) {
            return this.computeTimeTop(t.duration(e - n.clone().stripTime()));
        },
        computeTimeTop: function(e) {
            var t = this.slatEls.length;
            var n = (e - this.minTime) / this.slotDuration;
            var i;
            var r;
            n = Math.max(0, n);
            n = Math.min(t, n);
            i = Math.floor(n);
            i = Math.min(i, t - 1);
            r = n - i;
            return this.slatCoordCache.getTopPosition(i) + this.slatCoordCache.getHeight(i) * r;
        },
        renderDrag: function(e, t) {
            if (t) {
                return this.renderEventLocationHelper(e, t);
            } else {
                this.renderHighlight(this.eventToSpan(e));
            }
        },
        unrenderDrag: function() {
            this.unrenderHelper();
            this.unrenderHighlight();
        },
        renderEventResize: function(e, t) {
            return this.renderEventLocationHelper(e, t);
        },
        unrenderEventResize: function() {
            this.unrenderHelper();
        },
        renderHelper: function(e, t) {
            return this.renderHelperSegs(this.eventToSegs(e), t);
        },
        unrenderHelper: function() {
            this.unrenderHelperSegs();
        },
        renderBusinessHours: function() {
            var e = this.view.calendar.getBusinessHoursEvents();
            var t = this.eventsToSegs(e);
            this.renderBusinessSegs(t);
        },
        unrenderBusinessHours: function() {
            this.unrenderBusinessSegs();
        },
        getNowIndicatorUnit: function() {
            return "minute";
        },
        renderNowIndicator: function(t) {
            var n = this.spanToSegs({
                start: t,
                end: t
            });
            var i = this.computeDateTop(t, t);
            var r = [];
            var s;
            for (s = 0; s < n.length; s++) {
                r.push(e('<div class="fc-now-indicator fc-now-indicator-line"></div>').css("top", i).appendTo(this.colContainerEls.eq(n[s].col))[0]);
            }
            if (n.length > 0) {
                r.push(e('<div class="fc-now-indicator fc-now-indicator-arrow"></div>').css("top", i).appendTo(this.el.find(".fc-content-skeleton"))[0]);
            }
            this.nowIndicatorEls = e(r);
        },
        unrenderNowIndicator: function() {
            if (this.nowIndicatorEls) {
                this.nowIndicatorEls.remove();
                this.nowIndicatorEls = null;
            }
        },
        renderSelection: function(e) {
            if (this.view.opt("selectHelper")) {
                this.renderEventLocationHelper(e);
            } else {
                this.renderHighlight(e);
            }
        },
        unrenderSelection: function() {
            this.unrenderHelper();
            this.unrenderHighlight();
        },
        renderHighlight: function(e) {
            this.renderHighlightSegs(this.spanToSegs(e));
        },
        unrenderHighlight: function() {
            this.unrenderHighlightSegs();
        }
    });
    dt.mixin({
        colContainerEls: null,
        fgContainerEls: null,
        bgContainerEls: null,
        helperContainerEls: null,
        highlightContainerEls: null,
        businessContainerEls: null,
        fgSegs: null,
        bgSegs: null,
        helperSegs: null,
        highlightSegs: null,
        businessSegs: null,
        renderContentSkeleton: function() {
            var t = "";
            var n;
            var i;
            for (n = 0; n < this.colCnt; n++) {
                t += "<td>" + '<div class="fc-content-col">' + '<div class="fc-event-container fc-helper-container"></div>' + '<div class="fc-event-container"></div>' + '<div class="fc-highlight-container"></div>' + '<div class="fc-bgevent-container"></div>' + '<div class="fc-business-container"></div>' + "</div>" + "</td>";
            }
            i = e('<div class="fc-content-skeleton">' + "<table>" + "<tr>" + t + "</tr>" + "</table>" + "</div>");
            this.colContainerEls = i.find(".fc-content-col");
            this.helperContainerEls = i.find(".fc-helper-container");
            this.fgContainerEls = i.find(".fc-event-container:not(.fc-helper-container)");
            this.bgContainerEls = i.find(".fc-bgevent-container");
            this.highlightContainerEls = i.find(".fc-highlight-container");
            this.businessContainerEls = i.find(".fc-business-container");
            this.bookendCells(i.find("tr"));
            this.el.append(i);
        },
        renderFgSegs: function(e) {
            e = this.renderFgSegsIntoContainers(e, this.fgContainerEls);
            this.fgSegs = e;
            return e;
        },
        unrenderFgSegs: function() {
            this.unrenderNamedSegs("fgSegs");
        },
        renderHelperSegs: function(t, n) {
            var i = [];
            var r, s;
            var a;
            t = this.renderFgSegsIntoContainers(t, this.helperContainerEls);
            for (r = 0; r < t.length; r++) {
                s = t[r];
                if (n && n.col === s.col) {
                    a = n.el;
                    s.el.css({
                        left: a.css("left"),
                        right: a.css("right"),
                        "margin-left": a.css("margin-left"),
                        "margin-right": a.css("margin-right")
                    });
                }
                i.push(s.el[0]);
            }
            this.helperSegs = t;
            return e(i);
        },
        unrenderHelperSegs: function() {
            this.unrenderNamedSegs("helperSegs");
        },
        renderBgSegs: function(e) {
            e = this.renderFillSegEls("bgEvent", e);
            this.updateSegVerticals(e);
            this.attachSegsByCol(this.groupSegsByCol(e), this.bgContainerEls);
            this.bgSegs = e;
            return e;
        },
        unrenderBgSegs: function() {
            this.unrenderNamedSegs("bgSegs");
        },
        renderHighlightSegs: function(e) {
            e = this.renderFillSegEls("highlight", e);
            this.updateSegVerticals(e);
            this.attachSegsByCol(this.groupSegsByCol(e), this.highlightContainerEls);
            this.highlightSegs = e;
        },
        unrenderHighlightSegs: function() {
            this.unrenderNamedSegs("highlightSegs");
        },
        renderBusinessSegs: function(e) {
            e = this.renderFillSegEls("businessHours", e);
            this.updateSegVerticals(e);
            this.attachSegsByCol(this.groupSegsByCol(e), this.businessContainerEls);
            this.businessSegs = e;
        },
        unrenderBusinessSegs: function() {
            this.unrenderNamedSegs("businessSegs");
        },
        groupSegsByCol: function(e) {
            var t = [];
            var n;
            for (n = 0; n < this.colCnt; n++) {
                t.push([]);
            }
            for (n = 0; n < e.length; n++) {
                t[e[n].col].push(e[n]);
            }
            return t;
        },
        attachSegsByCol: function(e, t) {
            var n;
            var i;
            var r;
            for (n = 0; n < this.colCnt; n++) {
                i = e[n];
                for (r = 0; r < i.length; r++) {
                    t.eq(n).append(i[r].el);
                }
            }
        },
        unrenderNamedSegs: function(e) {
            var t = this[e];
            var n;
            if (t) {
                for (n = 0; n < t.length; n++) {
                    t[n].el.remove();
                }
                this[e] = null;
            }
        },
        renderFgSegsIntoContainers: function(e, t) {
            var n;
            var i;
            e = this.renderFgSegEls(e);
            n = this.groupSegsByCol(e);
            for (i = 0; i < this.colCnt; i++) {
                this.updateFgSegCoords(n[i]);
            }
            this.attachSegsByCol(n, t);
            return e;
        },
        fgSegHtml: function(e, t) {
            var n = this.view;
            var i = e.event;
            var r = n.isEventDraggable(i);
            var s = !t && e.isStart && n.isEventResizableFromStart(i);
            var a = !t && e.isEnd && n.isEventResizableFromEnd(i);
            var o = this.getSegClasses(e, r, s || a);
            var l = de(this.getSegSkinCss(e));
            var u;
            var c;
            var d;
            o.unshift("fc-time-grid-event", "fc-v-event");
            if (n.isMultiDayEvent(i)) {
                if (e.isStart || e.isEnd) {
                    u = this.getEventTimeText(e);
                    c = this.getEventTimeText(e, "LT");
                    d = this.getEventTimeText(e, null, false);
                }
            } else {
                u = this.getEventTimeText(i);
                c = this.getEventTimeText(i, "LT");
                d = this.getEventTimeText(i, null, false);
            }
            return '<a class="' + o.join(" ") + '"' + (i.url ? ' href="' + ue(i.url) + '"' : "") + (l ? ' style="' + l + '"' : "") + ">" + '<div class="fc-content">' + (u ? '<div class="fc-time"' + ' data-start="' + ue(d) + '"' + ' data-full="' + ue(c) + '"' + ">" + "<span>" + ue(u) + "</span>" + "</div>" : "") + (i.title ? '<div class="fc-title">' + ue(i.title) + "</div>" : "") + "</div>" + '<div class="fc-bg"/>' + (a ? '<div class="fc-resizer fc-end-resizer" />' : "") + "</a>";
        },
        updateSegVerticals: function(e) {
            this.computeSegVerticals(e);
            this.assignSegVerticals(e);
        },
        computeSegVerticals: function(e) {
            var t, n;
            for (t = 0; t < e.length; t++) {
                n = e[t];
                n.top = this.computeDateTop(n.start, n.start);
                n.bottom = this.computeDateTop(n.end, n.start);
            }
        },
        assignSegVerticals: function(e) {
            var t, n;
            for (t = 0; t < e.length; t++) {
                n = e[t];
                n.el.css(this.generateSegVerticalCss(n));
            }
        },
        generateSegVerticalCss: function(e) {
            return {
                top: e.top,
                bottom: -e.bottom
            };
        },
        updateFgSegCoords: function(e) {
            this.computeSegVerticals(e);
            this.computeFgSegHorizontals(e);
            this.assignSegVerticals(e);
            this.assignFgSegHorizontals(e);
        },
        computeFgSegHorizontals: function(e) {
            var t;
            var n;
            var i;
            this.sortEventSegs(e);
            t = ht(e);
            ft(t);
            if (n = t[0]) {
                for (i = 0; i < n.length; i++) {
                    vt(n[i]);
                }
                for (i = 0; i < n.length; i++) {
                    this.computeFgSegForwardBack(n[i], 0, 0);
                }
            }
        },
        computeFgSegForwardBack: function(e, t, n) {
            var i = e.forwardSegs;
            var r;
            if (e.forwardCoord === undefined) {
                if (!i.length) {
                    e.forwardCoord = 1;
                } else {
                    this.sortForwardSegs(i);
                    this.computeFgSegForwardBack(i[0], t + 1, n);
                    e.forwardCoord = i[0].backwardCoord;
                }
                e.backwardCoord = e.forwardCoord - (e.forwardCoord - n) / (t + 1);
                for (r = 0; r < i.length; r++) {
                    this.computeFgSegForwardBack(i[r], 0, e.forwardCoord);
                }
            }
        },
        sortForwardSegs: function(e) {
            e.sort(ge(this, "compareForwardSegs"));
        },
        compareForwardSegs: function(e, t) {
            return t.forwardPressure - e.forwardPressure || (e.backwardCoord || 0) - (t.backwardCoord || 0) || this.compareEventSegs(e, t);
        },
        assignFgSegHorizontals: function(e) {
            var t, n;
            for (t = 0; t < e.length; t++) {
                n = e[t];
                n.el.css(this.generateFgSegHorizontalCss(n));
                if (n.bottom - n.top < 30) {
                    n.el.addClass("fc-short");
                }
            }
        },
        generateFgSegHorizontalCss: function(e) {
            var t = this.view.opt("slotEventOverlap");
            var n = e.backwardCoord;
            var i = e.forwardCoord;
            var r = this.generateSegVerticalCss(e);
            var s;
            var a;
            if (t) {
                i = Math.min(1, n + (i - n) * 2);
            }
            if (this.isRTL) {
                s = 1 - i;
                a = n;
            } else {
                s = n;
                a = 1 - i;
            }
            r.zIndex = e.level + 1;
            r.left = s * 100 + "%";
            r.right = a * 100 + "%";
            if (t && e.forwardPressure) {
                r[this.isRTL ? "marginLeft" : "marginRight"] = 10 * 2;
            }
            return r;
        }
    });
    function ht(e) {
        var t = [];
        var n, i;
        var r;
        for (n = 0; n < e.length; n++) {
            i = e[n];
            for (r = 0; r < t.length; r++) {
                if (!gt(i, t[r]).length) {
                    break;
                }
            }
            i.level = r;
            (t[r] || (t[r] = [])).push(i);
        }
        return t;
    }
    function ft(e) {
        var t, n;
        var i, r;
        var s;
        for (t = 0; t < e.length; t++) {
            n = e[t];
            for (i = 0; i < n.length; i++) {
                r = n[i];
                r.forwardSegs = [];
                for (s = t + 1; s < e.length; s++) {
                    gt(r, e[s], r.forwardSegs);
                }
            }
        }
    }
    function vt(e) {
        var t = e.forwardSegs;
        var n = 0;
        var i, r;
        if (e.forwardPressure === undefined) {
            for (i = 0; i < t.length; i++) {
                r = t[i];
                vt(r);
                n = Math.max(n, 1 + r.forwardPressure);
            }
            e.forwardPressure = n;
        }
    }
    function gt(e, t, n) {
        n = n || [];
        for (var i = 0; i < t.length; i++) {
            if (pt(e, t[i])) {
                n.push(t[i]);
            }
        }
        return n;
    }
    function pt(e, t) {
        return e.bottom > t.top && e.top < t.bottom;
    }
    var mt = n.View = Ve.extend(We, je, {
        type: null,
        name: null,
        title: null,
        calendar: null,
        options: null,
        el: null,
        displaying: null,
        isSkeletonRendered: false,
        isEventsRendered: false,
        start: null,
        end: null,
        intervalStart: null,
        intervalEnd: null,
        intervalDuration: null,
        intervalUnit: null,
        isRTL: false,
        isSelected: false,
        selectedEvent: null,
        eventOrderSpecs: null,
        widgetHeaderClass: null,
        widgetContentClass: null,
        highlightStateClass: null,
        nextDayThreshold: null,
        isHiddenDayHash: null,
        isNowIndicatorRendered: null,
        initialNowDate: null,
        initialNowQueriedMs: null,
        nowIndicatorTimeoutID: null,
        nowIndicatorIntervalID: null,
        constructor: function(e, n, i, r) {
            this.calendar = e;
            this.type = this.name = n;
            this.options = i;
            this.intervalDuration = r || t.duration(1, "day");
            this.nextDayThreshold = t.duration(this.opt("nextDayThreshold"));
            this.initThemingProps();
            this.initHiddenDays();
            this.isRTL = this.opt("isRTL");
            this.eventOrderSpecs = N(this.opt("eventOrder"));
            this.initialize();
        },
        initialize: function() {},
        opt: function(e) {
            return this.options[e];
        },
        trigger: function(e, t) {
            var n = this.calendar;
            return n.trigger.apply(n, [ e, t || this ].concat(Array.prototype.slice.call(arguments, 2), [ this ]));
        },
        setDate: function(e) {
            this.setRange(this.computeRange(e));
        },
        setRange: function(t) {
            e.extend(this, t);
            this.updateTitle();
        },
        computeRange: function(e) {
            var t = U(this.intervalDuration);
            var n = e.clone().startOf(t);
            var i = n.clone().add(this.intervalDuration);
            var r, s;
            if (/year|month|week|day/.test(t)) {
                n.stripTime();
                i.stripTime();
            } else {
                if (!n.hasTime()) {
                    n = this.calendar.time(0);
                }
                if (!i.hasTime()) {
                    i = this.calendar.time(0);
                }
            }
            r = n.clone();
            r = this.skipHiddenDays(r);
            s = i.clone();
            s = this.skipHiddenDays(s, -1, true);
            return {
                intervalUnit: t,
                intervalStart: n,
                intervalEnd: i,
                start: r,
                end: s
            };
        },
        computePrevDate: function(e) {
            return this.massageCurrentDate(e.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1);
        },
        computeNextDate: function(e) {
            return this.massageCurrentDate(e.clone().startOf(this.intervalUnit).add(this.intervalDuration));
        },
        massageCurrentDate: function(e, t) {
            if (this.intervalDuration.as("days") <= 1) {
                if (this.isHiddenDay(e)) {
                    e = this.skipHiddenDays(e, t);
                    e.startOf("day");
                }
            }
            return e;
        },
        updateTitle: function() {
            this.title = this.computeTitle();
        },
        computeTitle: function() {
            return this.formatRange({
                start: this.calendar.applyTimezone(this.intervalStart),
                end: this.calendar.applyTimezone(this.intervalEnd)
            }, this.opt("titleFormat") || this.computeTitleFormat(), this.opt("titleRangeSeparator"));
        },
        computeTitleFormat: function() {
            if (this.intervalUnit == "year") {
                return "YYYY";
            } else if (this.intervalUnit == "month") {
                return this.opt("monthYearFormat");
            } else if (this.intervalDuration.as("days") > 1) {
                return "ll";
            } else {
                return "LL";
            }
        },
        formatRange: function(e, t, n) {
            var i = e.end;
            if (!i.hasTime()) {
                i = i.clone().subtract(1);
            }
            return Fe(e.start, i, t, n, this.opt("isRTL"));
        },
        setElement: function(e) {
            this.el = e;
            this.bindGlobalHandlers();
        },
        removeElement: function() {
            this.clear();
            if (this.isSkeletonRendered) {
                this.unrenderSkeleton();
                this.isSkeletonRendered = false;
            }
            this.unbindGlobalHandlers();
            this.el.remove();
        },
        display: function(e, t) {
            var n = this;
            var i = null;
            if (t != null && this.displaying) {
                i = this.queryScroll();
            }
            this.calendar.freezeContentHeight();
            return me(this.clear(), function() {
                return n.displaying = me(n.displayView(e), function() {
                    if (t != null) {
                        n.setScroll(t);
                    } else {
                        n.forceScroll(n.computeInitialScroll(i));
                    }
                    n.calendar.unfreezeContentHeight();
                    n.triggerRender();
                });
            });
        },
        clear: function() {
            var t = this;
            var n = this.displaying;
            if (n) {
                return me(n, function() {
                    t.displaying = null;
                    t.clearEvents();
                    return t.clearView();
                });
            } else {
                return e.when();
            }
        },
        displayView: function(e) {
            if (!this.isSkeletonRendered) {
                this.renderSkeleton();
                this.isSkeletonRendered = true;
            }
            if (e) {
                this.setDate(e);
            }
            if (this.render) {
                this.render();
            }
            this.renderDates();
            this.updateSize();
            this.renderBusinessHours();
            this.startNowIndicator();
        },
        clearView: function() {
            this.unselect();
            this.stopNowIndicator();
            this.triggerUnrender();
            this.unrenderBusinessHours();
            this.unrenderDates();
            if (this.destroy) {
                this.destroy();
            }
        },
        renderSkeleton: function() {},
        unrenderSkeleton: function() {},
        renderDates: function() {},
        unrenderDates: function() {},
        triggerRender: function() {
            this.trigger("viewRender", this, this, this.el);
        },
        triggerUnrender: function() {
            this.trigger("viewDestroy", this, this, this.el);
        },
        bindGlobalHandlers: function() {
            this.listenTo(e(document), "mousedown", this.handleDocumentMousedown);
            this.listenTo(e(document), "touchstart", this.processUnselect);
        },
        unbindGlobalHandlers: function() {
            this.stopListeningTo(e(document));
        },
        initThemingProps: function() {
            var e = this.opt("theme") ? "ui" : "fc";
            this.widgetHeaderClass = e + "-widget-header";
            this.widgetContentClass = e + "-widget-content";
            this.highlightStateClass = e + "-state-highlight";
        },
        renderBusinessHours: function() {},
        unrenderBusinessHours: function() {},
        startNowIndicator: function() {
            var e = this;
            var n;
            var i;
            var r;
            if (this.opt("nowIndicator")) {
                n = this.getNowIndicatorUnit();
                if (n) {
                    i = ge(this, "updateNowIndicator");
                    this.initialNowDate = this.calendar.getNow();
                    this.initialNowQueriedMs = +new Date();
                    this.renderNowIndicator(this.initialNowDate);
                    this.isNowIndicatorRendered = true;
                    r = this.initialNowDate.clone().startOf(n).add(1, n) - this.initialNowDate;
                    this.nowIndicatorTimeoutID = setTimeout(function() {
                        e.nowIndicatorTimeoutID = null;
                        i();
                        r = +t.duration(1, n);
                        r = Math.max(100, r);
                        e.nowIndicatorIntervalID = setInterval(i, r);
                    }, r);
                }
            }
        },
        updateNowIndicator: function() {
            if (this.isNowIndicatorRendered) {
                this.unrenderNowIndicator();
                this.renderNowIndicator(this.initialNowDate.clone().add(new Date() - this.initialNowQueriedMs));
            }
        },
        stopNowIndicator: function() {
            if (this.isNowIndicatorRendered) {
                if (this.nowIndicatorTimeoutID) {
                    clearTimeout(this.nowIndicatorTimeoutID);
                    this.nowIndicatorTimeoutID = null;
                }
                if (this.nowIndicatorIntervalID) {
                    clearTimeout(this.nowIndicatorIntervalID);
                    this.nowIndicatorIntervalID = null;
                }
                this.unrenderNowIndicator();
                this.isNowIndicatorRendered = false;
            }
        },
        getNowIndicatorUnit: function() {},
        renderNowIndicator: function(e) {},
        unrenderNowIndicator: function() {},
        updateSize: function(e) {
            var t;
            if (e) {
                t = this.queryScroll();
            }
            this.updateHeight(e);
            this.updateWidth(e);
            this.updateNowIndicator();
            if (e) {
                this.setScroll(t);
            }
        },
        updateWidth: function(e) {},
        updateHeight: function(e) {
            var t = this.calendar;
            this.setHeight(t.getSuggestedViewHeight(), t.isHeightAuto());
        },
        setHeight: function(e, t) {},
        computeInitialScroll: function(e) {
            return 0;
        },
        queryScroll: function() {},
        setScroll: function(e) {},
        forceScroll: function(e) {
            var t = this;
            this.setScroll(e);
            setTimeout(function() {
                t.setScroll(e);
            }, 0);
        },
        displayEvents: function(e) {
            var t = this.queryScroll();
            this.clearEvents();
            this.renderEvents(e);
            this.isEventsRendered = true;
            this.setScroll(t);
            this.triggerEventRender();
        },
        clearEvents: function() {
            var e;
            if (this.isEventsRendered) {
                e = this.queryScroll();
                this.triggerEventUnrender();
                if (this.destroyEvents) {
                    this.destroyEvents();
                }
                this.unrenderEvents();
                this.setScroll(e);
                this.isEventsRendered = false;
            }
        },
        renderEvents: function(e) {},
        unrenderEvents: function() {},
        triggerEventRender: function() {
            this.renderedEventSegEach(function(e) {
                this.trigger("eventAfterRender", e.event, e.event, e.el);
            });
            this.trigger("eventAfterAllRender");
        },
        triggerEventUnrender: function() {
            this.renderedEventSegEach(function(e) {
                this.trigger("eventDestroy", e.event, e.event, e.el);
            });
        },
        resolveEventEl: function(t, n) {
            var i = this.trigger("eventRender", t, t, n);
            if (i === false) {
                n = null;
            } else if (i && i !== true) {
                n = e(i);
            }
            return n;
        },
        showEvent: function(e) {
            this.renderedEventSegEach(function(e) {
                e.el.css("visibility", "");
            }, e);
        },
        hideEvent: function(e) {
            this.renderedEventSegEach(function(e) {
                e.el.css("visibility", "hidden");
            }, e);
        },
        renderedEventSegEach: function(e, t) {
            var n = this.getEventSegs();
            var i;
            for (i = 0; i < n.length; i++) {
                if (!t || n[i].event._id === t._id) {
                    if (n[i].el) {
                        e.call(this, n[i]);
                    }
                }
            }
        },
        getEventSegs: function() {
            return [];
        },
        isEventDraggable: function(e) {
            var t = e.source || {};
            return le(e.startEditable, t.startEditable, this.opt("eventStartEditable"), e.editable, t.editable, this.opt("editable"));
        },
        reportEventDrop: function(e, t, n, i, r) {
            var s = this.calendar;
            var a = s.mutateEvent(e, t, n);
            var o = function() {
                a.undo();
                s.reportEventChange();
            };
            this.triggerEventDrop(e, a.dateDelta, o, i, r);
            s.reportEventChange();
        },
        triggerEventDrop: function(e, t, n, i, r) {
            this.trigger("eventDrop", i[0], e, t, n, r, {});
        },
        reportExternalDrop: function(t, n, i, r, s) {
            var a = t.eventProps;
            var o;
            var l;
            if (a) {
                o = e.extend({}, a, n);
                l = this.calendar.renderEvent(o, t.stick)[0];
            }
            this.triggerExternalDrop(l, n, i, r, s);
        },
        triggerExternalDrop: function(e, t, n, i, r) {
            this.trigger("drop", n[0], t.start, i, r);
            if (e) {
                this.trigger("eventReceive", null, e);
            }
        },
        renderDrag: function(e, t) {},
        unrenderDrag: function() {},
        isEventResizableFromStart: function(e) {
            return this.opt("eventResizableFromStart") && this.isEventResizable(e);
        },
        isEventResizableFromEnd: function(e) {
            return this.isEventResizable(e);
        },
        isEventResizable: function(e) {
            var t = e.source || {};
            return le(e.durationEditable, t.durationEditable, this.opt("eventDurationEditable"), e.editable, t.editable, this.opt("editable"));
        },
        reportEventResize: function(e, t, n, i, r) {
            var s = this.calendar;
            var a = s.mutateEvent(e, t, n);
            var o = function() {
                a.undo();
                s.reportEventChange();
            };
            this.triggerEventResize(e, a.durationDelta, o, i, r);
            s.reportEventChange();
        },
        triggerEventResize: function(e, t, n, i, r) {
            this.trigger("eventResize", i[0], e, t, n, r, {});
        },
        select: function(e, t) {
            this.unselect(t);
            this.renderSelection(e);
            this.reportSelection(e, t);
        },
        renderSelection: function(e) {},
        reportSelection: function(e, t) {
            this.isSelected = true;
            this.triggerSelect(e, t);
        },
        triggerSelect: function(e, t) {
            this.trigger("select", null, this.calendar.applyTimezone(e.start), this.calendar.applyTimezone(e.end), t);
        },
        unselect: function(e) {
            if (this.isSelected) {
                this.isSelected = false;
                if (this.destroySelection) {
                    this.destroySelection();
                }
                this.unrenderSelection();
                this.trigger("unselect", null, e);
            }
        },
        unrenderSelection: function() {},
        selectEvent: function(e) {
            if (!this.selectedEvent || this.selectedEvent !== e) {
                this.unselectEvent();
                this.renderedEventSegEach(function(e) {
                    e.el.addClass("fc-selected");
                }, e);
                this.selectedEvent = e;
            }
        },
        unselectEvent: function() {
            if (this.selectedEvent) {
                this.renderedEventSegEach(function(e) {
                    e.el.removeClass("fc-selected");
                }, this.selectedEvent);
                this.selectedEvent = null;
            }
        },
        isEventSelected: function(e) {
            return this.selectedEvent && this.selectedEvent._id === e._id;
        },
        handleDocumentMousedown: function(e) {
            if (H(e)) {
                this.processUnselect(e);
            }
        },
        processUnselect: function(e) {
            this.processRangeUnselect(e);
            this.processEventUnselect(e);
        },
        processRangeUnselect: function(t) {
            var n;
            if (this.isSelected && this.opt("unselectAuto")) {
                n = this.opt("unselectCancel");
                if (!n || !e(t.target).closest(n).length) {
                    this.unselect(t);
                }
            }
        },
        processEventUnselect: function(t) {
            if (this.selectedEvent) {
                if (!e(t.target).closest(".fc-selected").length) {
                    this.unselectEvent();
                }
            }
        },
        triggerDayClick: function(e, t, n) {
            this.trigger("dayClick", t, this.calendar.applyTimezone(e.start), n);
        },
        initHiddenDays: function() {
            var t = this.opt("hiddenDays") || [];
            var n = [];
            var i = 0;
            var r;
            if (this.opt("weekends") === false) {
                t.push(0, 6);
            }
            for (r = 0; r < 7; r++) {
                if (!(n[r] = e.inArray(r, t) !== -1)) {
                    i++;
                }
            }
            if (!i) {
                throw "invalid hiddenDays";
            }
            this.isHiddenDayHash = n;
        },
        isHiddenDay: function(e) {
            if (t.isMoment(e)) {
                e = e.day();
            }
            return this.isHiddenDayHash[e];
        },
        skipHiddenDays: function(e, t, n) {
            var i = e.clone();
            t = t || 1;
            while (this.isHiddenDayHash[(i.day() + (n ? t : 0) + 7) % 7]) {
                i.add(t, "days");
            }
            return i;
        },
        computeDayRange: function(e) {
            var t = e.start.clone().stripTime();
            var n = e.end;
            var i = null;
            var r;
            if (n) {
                i = n.clone().stripTime();
                r = +n.time();
                if (r && r >= this.nextDayThreshold) {
                    i.add(1, "days");
                }
            }
            if (!n || i <= t) {
                i = t.clone().add(1, "days");
            }
            return {
                start: t,
                end: i
            };
        },
        isMultiDayEvent: function(e) {
            var t = this.computeDayRange(e);
            return t.end.diff(t.start, "days") > 1;
        }
    });
    var yt = n.Scroller = Ve.extend({
        el: null,
        scrollEl: null,
        overflowX: null,
        overflowY: null,
        constructor: function(e) {
            e = e || {};
            this.overflowX = e.overflowX || e.overflow || "auto";
            this.overflowY = e.overflowY || e.overflow || "auto";
        },
        render: function() {
            this.el = this.renderEl();
            this.applyOverflow();
        },
        renderEl: function() {
            return this.scrollEl = e('<div class="fc-scroller"></div>');
        },
        clear: function() {
            this.setHeight("auto");
            this.applyOverflow();
        },
        destroy: function() {
            this.el.remove();
        },
        applyOverflow: function() {
            this.scrollEl.css({
                "overflow-x": this.overflowX,
                "overflow-y": this.overflowY
            });
        },
        lockOverflow: function(e) {
            var t = this.overflowX;
            var n = this.overflowY;
            e = e || this.getScrollbarWidths();
            if (t === "auto") {
                t = e.top || e.bottom || this.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth ? "scroll" : "hidden";
            }
            if (n === "auto") {
                n = e.left || e.right || this.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight ? "scroll" : "hidden";
            }
            this.scrollEl.css({
                "overflow-x": t,
                "overflow-y": n
            });
        },
        setHeight: function(e) {
            this.scrollEl.height(e);
        },
        getScrollTop: function() {
            return this.scrollEl.scrollTop();
        },
        setScrollTop: function(e) {
            this.scrollEl.scrollTop(e);
        },
        getClientWidth: function() {
            return this.scrollEl[0].clientWidth;
        },
        getClientHeight: function() {
            return this.scrollEl[0].clientHeight;
        },
        getScrollbarWidths: function() {
            return S(this.scrollEl);
        }
    });
    var St = n.Calendar = Ve.extend({
        dirDefaults: null,
        langDefaults: null,
        overrides: null,
        dynamicOverrides: null,
        options: null,
        viewSpecCache: null,
        view: null,
        header: null,
        loadingLevel: 0,
        constructor: wt,
        initialize: function() {},
        populateOptionsHash: function() {
            var e, t;
            var n, i;
            e = le(this.dynamicOverrides.lang, this.overrides.lang);
            t = Et[e];
            if (!t) {
                e = St.defaults.lang;
                t = Et[e] || {};
            }
            n = le(this.dynamicOverrides.isRTL, this.overrides.isRTL, t.isRTL, St.defaults.isRTL);
            i = n ? St.rtlDefaults : {};
            this.dirDefaults = i;
            this.langDefaults = t;
            this.options = s([ St.defaults, i, t, this.overrides, this.dynamicOverrides ]);
            Tt(this.options);
        },
        getViewSpec: function(e) {
            var t = this.viewSpecCache;
            return t[e] || (t[e] = this.buildViewSpec(e));
        },
        getUnitViewSpec: function(t) {
            var i;
            var r;
            var s;
            if (e.inArray(t, P) != -1) {
                i = this.header.getViewsWithButtons();
                e.each(n.views, function(e) {
                    i.push(e);
                });
                for (r = 0; r < i.length; r++) {
                    s = this.getViewSpec(i[r]);
                    if (s) {
                        if (s.singleUnit == t) {
                            return s;
                        }
                    }
                }
            }
        },
        buildViewSpec: function(e) {
            var n = this.overrides.views || {};
            var r = [];
            var a = [];
            var o = [];
            var l = e;
            var u;
            var c;
            var d;
            var h;
            while (l) {
                u = i[l];
                c = n[l];
                l = null;
                if (typeof u === "function") {
                    u = {
                        class: u
                    };
                }
                if (u) {
                    r.unshift(u);
                    a.unshift(u.defaults || {});
                    d = d || u.duration;
                    l = l || u.type;
                }
                if (c) {
                    o.unshift(c);
                    d = d || c.duration;
                    l = l || c.type;
                }
            }
            u = te(r);
            u.type = e;
            if (!u["class"]) {
                return false;
            }
            if (d) {
                d = t.duration(d);
                if (d.valueOf()) {
                    u.duration = d;
                    h = U(d);
                    if (d.as(h) === 1) {
                        u.singleUnit = h;
                        o.unshift(n[h] || {});
                    }
                }
            }
            u.defaults = s(a);
            u.overrides = s(o);
            this.buildViewSpecOptions(u);
            this.buildViewSpecButtonText(u, e);
            return u;
        },
        buildViewSpecOptions: function(e) {
            e.options = s([ St.defaults, e.defaults, this.dirDefaults, this.langDefaults, this.overrides, e.overrides, this.dynamicOverrides ]);
            Tt(e.options);
        },
        buildViewSpecButtonText: function(e, t) {
            function n(n) {
                var i = n.buttonText || {};
                return i[t] || (e.singleUnit ? i[e.singleUnit] : null);
            }
            e.buttonTextOverride = n(this.dynamicOverrides) || n(this.overrides) || e.overrides.buttonText;
            e.buttonTextDefault = n(this.langDefaults) || n(this.dirDefaults) || e.defaults.buttonText || n(St.defaults) || (e.duration ? this.humanizeDuration(e.duration) : null) || t;
        },
        instantiateView: function(e) {
            var t = this.getViewSpec(e);
            return new t["class"](this, e, t.options, t.duration);
        },
        isValidViewType: function(e) {
            return Boolean(this.getViewSpec(e));
        },
        pushLoading: function() {
            if (!this.loadingLevel++) {
                this.trigger("loading", null, true, this.view);
            }
        },
        popLoading: function() {
            if (!--this.loadingLevel) {
                this.trigger("loading", null, false, this.view);
            }
        },
        buildSelectSpan: function(e, t) {
            var n = this.moment(e).stripZone();
            var i;
            if (t) {
                i = this.moment(t).stripZone();
            } else if (n.hasTime()) {
                i = n.clone().add(this.defaultTimedEventDuration);
            } else {
                i = n.clone().add(this.defaultAllDayEventDuration);
            }
            return {
                start: n,
                end: i
            };
        }
    });
    St.mixin(We);
    function wt(i, r) {
        var s = this;
        s.render = b;
        s.destroy = C;
        s.refetchEvents = B;
        s.refetchEventSources = N;
        s.reportEvents = _;
        s.reportEventChange = V;
        s.rerenderEvents = O;
        s.changeView = x;
        s.select = W;
        s.unselect = j;
        s.prev = U;
        s.next = Z;
        s.prevYear = q;
        s.nextYear = $;
        s.today = X;
        s.gotoDate = Q;
        s.incrementDate = K;
        s.zoomTo = J;
        s.getDate = ee;
        s.getCalendar = re;
        s.getView = se;
        s.option = ae;
        s.trigger = le;
        s.dynamicOverrides = {};
        s.viewSpecCache = {};
        s.optionHandlers = {};
        s.overrides = a(r || {});
        s.populateOptionsHash();
        var o;
        s.bindOptions([ "lang", "monthNames", "monthNamesShort", "dayNames", "dayNamesShort", "firstDay", "weekNumberCalculation" ], function(e, t, n, i, r, s, a) {
            o = ne(Ct(e));
            if (t) {
                o._months = t;
            }
            if (n) {
                o._monthsShort = n;
            }
            if (i) {
                o._weekdays = i;
            }
            if (r) {
                o._weekdaysShort = r;
            }
            if (s != null) {
                var u = ne(o._week);
                u.dow = s;
                o._week = u;
            }
            if (a === "iso") {
                a = "ISO";
            }
            if (a === "ISO" || a === "local" || typeof a === "function") {
                o._fullCalendar_weekCalc = a;
            }
            if (D) {
                l(D);
            }
        });
        s.defaultAllDayEventDuration = t.duration(s.options.defaultAllDayEventDuration);
        s.defaultTimedEventDuration = t.duration(s.options.defaultTimedEventDuration);
        s.moment = function() {
            var e;
            if (s.options.timezone === "local") {
                e = n.moment.apply(null, arguments);
                if (e.hasTime()) {
                    e.local();
                }
            } else if (s.options.timezone === "UTC") {
                e = n.moment.utc.apply(null, arguments);
            } else {
                e = n.moment.parseZone.apply(null, arguments);
            }
            l(e);
            return e;
        };
        function l(e) {
            if ("_locale" in e) {
                e._locale = o;
            } else {
                e._lang = o;
            }
        }
        s.getIsAmbigTimezone = function() {
            return s.options.timezone !== "local" && s.options.timezone !== "UTC";
        };
        s.applyTimezone = function(e) {
            if (!e.hasTime()) {
                return e.clone();
            }
            var t = s.moment(e.toArray());
            var n = e.time() - t.time();
            var i;
            if (n) {
                i = t.clone().add(n);
                if (e.time() - i.time() === 0) {
                    t = i;
                }
            }
            return t;
        };
        s.getNow = function() {
            var e = s.options.now;
            if (typeof e === "function") {
                e = e();
            }
            return s.moment(e).stripZone();
        };
        s.getEventEnd = function(e) {
            if (e.end) {
                return e.end.clone();
            } else {
                return s.getDefaultEventEnd(e.allDay, e.start);
            }
        };
        s.getDefaultEventEnd = function(e, t) {
            var n = t.clone();
            if (e) {
                n.stripTime().add(s.defaultAllDayEventDuration);
            } else {
                n.add(s.defaultTimedEventDuration);
            }
            if (s.getIsAmbigTimezone()) {
                n.stripZone();
            }
            return n;
        };
        s.humanizeDuration = function(e) {
            return (e.locale || e.lang).call(e, s.options.lang).humanize();
        };
        kt.call(s);
        var u = s.isFetchNeeded;
        var c = s.fetchEvents;
        var d = s.fetchEventSources;
        var h = i[0];
        var f;
        var v;
        var g;
        var p;
        var m = {};
        var y;
        var S;
        var w = 0;
        var E = [];
        var D;
        if (s.options.defaultDate != null) {
            D = s.moment(s.options.defaultDate).stripZone();
        } else {
            D = s.getNow();
        }
        function b() {
            if (!v) {
                H();
            } else if (R()) {
                L();
                x();
            }
        }
        function H() {
            i.addClass("fc");
            s.bindOption("theme", function(e) {
                g = e ? "ui" : "fc";
                i.toggleClass("ui-widget", e);
                i.toggleClass("fc-unthemed", !e);
            });
            s.bindOptions([ "isRTL", "lang" ], function(e) {
                i.toggleClass("fc-ltr", !e);
                i.toggleClass("fc-rtl", e);
            });
            v = e("<div class='fc-view-container'/>").prependTo(i);
            f = s.header = new Rt(s);
            T();
            x(s.options.defaultView);
            if (s.options.handleWindowResize) {
                S = pe(F, s.options.windowResizeDelay);
                e(window).resize(S);
            }
        }
        function T() {
            f.render();
            if (f.el) {
                i.prepend(f.el);
            }
        }
        function C() {
            if (p) {
                p.removeElement();
            }
            f.removeElement();
            v.remove();
            i.removeClass("fc fc-ltr fc-rtl fc-unthemed ui-widget");
            if (S) {
                e(window).unbind("resize", S);
            }
        }
        function R() {
            return i.is(":visible");
        }
        function x(t, n) {
            w++;
            if (p && t && p.type !== t) {
                te();
                I();
            }
            if (!p && t) {
                p = s.view = m[t] || (m[t] = s.instantiateView(t));
                p.setElement(e("<div class='fc-view fc-" + t + "-view' />").appendTo(v));
                f.activateButton(t);
            }
            if (p) {
                D = p.massageCurrentDate(D);
                if (!p.displaying || !D.isWithin(p.intervalStart, p.intervalEnd)) {
                    if (R()) {
                        p.display(D, n);
                        ie();
                        P();
                        Y();
                        G();
                    }
                }
            }
            ie();
            w--;
        }
        function I() {
            f.deactivateButton(p.type);
            p.removeElement();
            p = s.view = null;
        }
        function k() {
            w++;
            te();
            var e = p.type;
            var t = p.queryScroll();
            I();
            x(e, t);
            ie();
            w--;
        }
        s.getSuggestedViewHeight = function() {
            if (y === undefined) {
                L();
            }
            return y;
        };
        s.isHeightAuto = function() {
            return s.options.contentHeight === "auto" || s.options.height === "auto";
        };
        function M(e) {
            if (R()) {
                if (e) {
                    z();
                }
                w++;
                p.updateSize(true);
                w--;
                return true;
            }
        }
        function L() {
            if (R()) {
                z();
            }
        }
        function z() {
            if (typeof s.options.contentHeight === "number") {
                y = s.options.contentHeight;
            } else if (typeof s.options.height === "number") {
                y = s.options.height - (f.el ? f.el.outerHeight(true) : 0);
            } else {
                y = Math.round(v.width() / Math.max(s.options.aspectRatio, .5));
            }
        }
        function F(e) {
            if (!w && e.target === window && p.start) {
                if (M(true)) {
                    p.trigger("windowResize", h);
                }
            }
        }
        function B() {
            A();
        }
        function N(e) {
            d(s.getEventSourcesByMatchArray(e));
        }
        function O() {
            if (R()) {
                te();
                p.displayEvents(E);
                ie();
            }
        }
        function G() {
            if (!s.options.lazyFetching || u(p.start, p.end)) {
                A();
            } else {
                O();
            }
        }
        function A() {
            c(p.start, p.end);
        }
        function _(e) {
            E = e;
            O();
        }
        function V() {
            O();
        }
        function P() {
            f.updateTitle(p.title);
        }
        function Y() {
            var e = s.getNow();
            if (e.isWithin(p.intervalStart, p.intervalEnd)) {
                f.disableButton("today");
            } else {
                f.enableButton("today");
            }
        }
        function W(e, t) {
            p.select(s.buildSelectSpan.apply(s, arguments));
        }
        function j() {
            if (p) {
                p.unselect();
            }
        }
        function U() {
            D = p.computePrevDate(D);
            x();
        }
        function Z() {
            D = p.computeNextDate(D);
            x();
        }
        function q() {
            D.add(-1, "years");
            x();
        }
        function $() {
            D.add(1, "years");
            x();
        }
        function X() {
            D = s.getNow();
            x();
        }
        function Q(e) {
            D = s.moment(e).stripZone();
            x();
        }
        function K(e) {
            D.add(t.duration(e));
            x();
        }
        function J(e, t) {
            var n;
            t = t || "day";
            n = s.getViewSpec(t) || s.getUnitViewSpec(t);
            D = e.clone();
            x(n ? n.type : null);
        }
        function ee() {
            return s.applyTimezone(D);
        }
        s.freezeContentHeight = te;
        s.unfreezeContentHeight = ie;
        function te() {
            v.css({
                width: "100%",
                height: v.height(),
                overflow: "hidden"
            });
        }
        function ie() {
            v.css({
                width: "",
                height: "",
                overflow: ""
            });
        }
        function re() {
            return s;
        }
        function se() {
            return p;
        }
        function ae(e, t) {
            var n;
            if (typeof e === "string") {
                if (t === undefined) {
                    return s.options[e];
                } else {
                    n = {};
                    n[e] = t;
                    oe(n);
                }
            } else if (typeof e === "object") {
                oe(e);
            }
        }
        function oe(e) {
            var t = 0;
            var n;
            for (n in e) {
                s.dynamicOverrides[n] = e[n];
            }
            s.viewSpecCache = {};
            s.populateOptionsHash();
            for (n in e) {
                s.triggerOptionHandlers(n);
                t++;
            }
            if (t === 1) {
                if (n === "height" || n === "contentHeight" || n === "aspectRatio") {
                    M(true);
                    return;
                } else if (n === "defaultDate") {
                    return;
                } else if (n === "businessHours") {
                    if (p) {
                        p.unrenderBusinessHours();
                        p.renderBusinessHours();
                    }
                    return;
                } else if (n === "timezone") {
                    s.rezoneArrayEventSources();
                    B();
                    return;
                }
            }
            T();
            m = {};
            k();
        }
        function le(e, t) {
            var n = Array.prototype.slice.call(arguments, 2);
            t = t || h;
            this.triggerWith(e, t, n);
            if (s.options[e]) {
                return s.options[e].apply(t, n);
            }
        }
        s.initialize();
    }
    St.mixin({
        optionHandlers: null,
        bindOption: function(e, t) {
            this.bindOptions([ e ], t);
        },
        bindOptions: function(e, t) {
            var n = {
                func: t,
                names: e
            };
            var i;
            for (i = 0; i < e.length; i++) {
                this.registerOptionHandlerObj(e[i], n);
            }
            this.triggerOptionHandlerObj(n);
        },
        registerOptionHandlerObj: function(e, t) {
            (this.optionHandlers[e] || (this.optionHandlers[e] = [])).push(t);
        },
        triggerOptionHandlers: function(e) {
            var t = this.optionHandlers[e] || [];
            var n;
            for (n = 0; n < t.length; n++) {
                this.triggerOptionHandlerObj(t[n]);
            }
        },
        triggerOptionHandlerObj: function(e) {
            var t = e.names;
            var n = [];
            var i;
            for (i = 0; i < t.length; i++) {
                n.push(this.options[t[i]]);
            }
            e.func.apply(this, n);
        }
    });
    St.defaults = {
        titleRangeSeparator: " – ",
        monthYearFormat: "MMMM YYYY",
        defaultTimedEventDuration: "02:00:00",
        defaultAllDayEventDuration: {
            days: 1
        },
        forceEventDuration: false,
        nextDayThreshold: "09:00:00",
        defaultView: "month",
        aspectRatio: 1.35,
        header: {
            left: "title",
            center: "",
            right: "today prev,next"
        },
        weekends: true,
        weekNumbers: false,
        weekNumberTitle: "W",
        weekNumberCalculation: "local",
        scrollTime: "06:00:00",
        lazyFetching: true,
        startParam: "start",
        endParam: "end",
        timezoneParam: "timezone",
        timezone: false,
        isRTL: false,
        buttonText: {
            prev: "prev",
            next: "next",
            prevYear: "prev year",
            nextYear: "next year",
            year: "year",
            today: "today",
            month: "month",
            week: "week",
            day: "day"
        },
        buttonIcons: {
            prev: "left-single-arrow",
            next: "right-single-arrow",
            prevYear: "left-double-arrow",
            nextYear: "right-double-arrow"
        },
        theme: false,
        themeButtonIcons: {
            prev: "circle-triangle-w",
            next: "circle-triangle-e",
            prevYear: "seek-prev",
            nextYear: "seek-next"
        },
        dragOpacity: .75,
        dragRevertDuration: 500,
        dragScroll: true,
        unselectAuto: true,
        dropAccept: "*",
        eventOrder: "title",
        eventLimit: false,
        eventLimitText: "more",
        eventLimitClick: "popover",
        dayPopoverFormat: "LL",
        handleWindowResize: true,
        windowResizeDelay: 200,
        longPressDelay: 1e3
    };
    St.englishDefaults = {
        dayPopoverFormat: "dddd, MMMM D"
    };
    St.rtlDefaults = {
        header: {
            left: "next,prev today",
            center: "",
            right: "title"
        },
        buttonIcons: {
            prev: "right-single-arrow",
            next: "left-single-arrow",
            prevYear: "right-double-arrow",
            nextYear: "left-double-arrow"
        },
        themeButtonIcons: {
            prev: "circle-triangle-e",
            next: "circle-triangle-w",
            nextYear: "seek-prev",
            prevYear: "seek-next"
        }
    };
    var Et = n.langs = {};
    n.datepickerLang = function(t, n, i) {
        var r = Et[t] || (Et[t] = {});
        r.isRTL = i.isRTL;
        r.weekNumberTitle = i.weekHeader;
        e.each(Dt, function(e, t) {
            r[e] = t(i);
        });
        if (e.datepicker) {
            e.datepicker.regional[n] = e.datepicker.regional[t] = i;
            e.datepicker.regional.en = e.datepicker.regional[""];
            e.datepicker.setDefaults(i);
        }
    };
    n.lang = function(t, n) {
        var i;
        var r;
        i = Et[t] || (Et[t] = {});
        if (n) {
            i = Et[t] = s([ i, n ]);
        }
        r = Ct(t);
        e.each(bt, function(e, t) {
            if (i[e] == null) {
                i[e] = t(r, i);
            }
        });
        St.defaults.lang = t;
    };
    var Dt = {
        buttonText: function(e) {
            return {
                prev: ce(e.prevText),
                next: ce(e.nextText),
                today: ce(e.currentText)
            };
        },
        monthYearFormat: function(e) {
            return e.showMonthAfterYear ? "YYYY[" + e.yearSuffix + "] MMMM" : "MMMM YYYY[" + e.yearSuffix + "]";
        }
    };
    var bt = {
        dayOfMonthFormat: function(e, t) {
            var n = e.longDateFormat("l");
            n = n.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, "");
            if (t.isRTL) {
                n += " ddd";
            } else {
                n = "ddd " + n;
            }
            return n;
        },
        mediumTimeFormat: function(e) {
            return e.longDateFormat("LT").replace(/\s*a$/i, "a");
        },
        smallTimeFormat: function(e) {
            return e.longDateFormat("LT").replace(":mm", "(:mm)").replace(/(\Wmm)$/, "($1)").replace(/\s*a$/i, "a");
        },
        extraSmallTimeFormat: function(e) {
            return e.longDateFormat("LT").replace(":mm", "(:mm)").replace(/(\Wmm)$/, "($1)").replace(/\s*a$/i, "t");
        },
        hourFormat: function(e) {
            return e.longDateFormat("LT").replace(":mm", "").replace(/(\Wmm)$/, "").replace(/\s*a$/i, "a");
        },
        noMeridiemTimeFormat: function(e) {
            return e.longDateFormat("LT").replace(/\s*a$/i, "");
        }
    };
    var Ht = {
        smallDayDateFormat: function(e) {
            return e.isRTL ? "D dd" : "dd D";
        },
        weekFormat: function(e) {
            return e.isRTL ? "w[ " + e.weekNumberTitle + "]" : "[" + e.weekNumberTitle + " ]w";
        },
        smallWeekFormat: function(e) {
            return e.isRTL ? "w[" + e.weekNumberTitle + "]" : "[" + e.weekNumberTitle + "]w";
        }
    };
    function Tt(t) {
        e.each(Ht, function(e, n) {
            if (t[e] == null) {
                t[e] = n(t);
            }
        });
    }
    function Ct(e) {
        var n = t.localeData || t.langData;
        return n.call(t, e) || n.call(t, "en");
    }
    n.lang("en", St.englishDefaults);
    function Rt(t) {
        var n = this;
        n.render = a;
        n.removeElement = o;
        n.updateTitle = u;
        n.activateButton = c;
        n.deactivateButton = d;
        n.disableButton = h;
        n.enableButton = f;
        n.getViewsWithButtons = v;
        n.el = null;
        var i;
        var r = [];
        var s;
        function a() {
            var n = t.options;
            var r = n.header;
            s = n.theme ? "ui" : "fc";
            if (r) {
                if (!i) {
                    i = this.el = e("<div class='fc-toolbar'/>");
                } else {
                    i.empty();
                }
                i.append(l("left")).append(l("right")).append(l("center")).append('<div class="fc-clear"/>');
            } else {
                o();
            }
        }
        function o() {
            if (i) {
                i.remove();
                i = n.el = null;
            }
        }
        function l(n) {
            var i = e('<div class="fc-' + n + '"/>');
            var a = t.options;
            var o = a.header[n];
            if (o) {
                e.each(o.split(" "), function(n) {
                    var o = e();
                    var l = true;
                    var u;
                    e.each(this.split(","), function(n, i) {
                        var u;
                        var c;
                        var d;
                        var h;
                        var f;
                        var v;
                        var g;
                        var p;
                        var m;
                        var y;
                        if (i == "title") {
                            o = o.add(e("<h2>&nbsp;</h2>"));
                            l = false;
                        } else {
                            if (u = (a.customButtons || {})[i]) {
                                d = function(e) {
                                    if (u.click) {
                                        u.click.call(y[0], e);
                                    }
                                };
                                h = "";
                                f = u.text;
                            } else if (c = t.getViewSpec(i)) {
                                d = function() {
                                    t.changeView(i);
                                };
                                r.push(i);
                                h = c.buttonTextOverride;
                                f = c.buttonTextDefault;
                            } else if (t[i]) {
                                d = function() {
                                    t[i]();
                                };
                                h = (t.overrides.buttonText || {})[i];
                                f = a.buttonText[i];
                            }
                            if (d) {
                                v = u ? u.themeIcon : a.themeButtonIcons[i];
                                g = u ? u.icon : a.buttonIcons[i];
                                if (h) {
                                    p = ue(h);
                                } else if (v && a.theme) {
                                    p = "<span class='ui-icon ui-icon-" + v + "'></span>";
                                } else if (g && !a.theme) {
                                    p = "<span class='fc-icon fc-icon-" + g + "'></span>";
                                } else {
                                    p = ue(f);
                                }
                                m = [ "fc-" + i + "-button", s + "-button", s + "-state-default" ];
                                y = e('<button type="button" class="' + m.join(" ") + '">' + p + "</button>").click(function(e) {
                                    if (!y.hasClass(s + "-state-disabled")) {
                                        d(e);
                                        if (y.hasClass(s + "-state-active") || y.hasClass(s + "-state-disabled")) {
                                            y.removeClass(s + "-state-hover");
                                        }
                                    }
                                }).mousedown(function() {
                                    y.not("." + s + "-state-active").not("." + s + "-state-disabled").addClass(s + "-state-down");
                                }).mouseup(function() {
                                    y.removeClass(s + "-state-down");
                                }).hover(function() {
                                    y.not("." + s + "-state-active").not("." + s + "-state-disabled").addClass(s + "-state-hover");
                                }, function() {
                                    y.removeClass(s + "-state-hover").removeClass(s + "-state-down");
                                });
                                o = o.add(y);
                            }
                        }
                    });
                    if (l) {
                        o.first().addClass(s + "-corner-left").end().last().addClass(s + "-corner-right").end();
                    }
                    if (o.length > 1) {
                        u = e("<div/>");
                        if (l) {
                            u.addClass("fc-button-group");
                        }
                        u.append(o);
                        i.append(u);
                    } else {
                        i.append(o);
                    }
                });
            }
            return i;
        }
        function u(e) {
            if (i) {
                i.find("h2").text(e);
            }
        }
        function c(e) {
            if (i) {
                i.find(".fc-" + e + "-button").addClass(s + "-state-active");
            }
        }
        function d(e) {
            if (i) {
                i.find(".fc-" + e + "-button").removeClass(s + "-state-active");
            }
        }
        function h(e) {
            if (i) {
                i.find(".fc-" + e + "-button").prop("disabled", true).addClass(s + "-state-disabled");
            }
        }
        function f(e) {
            if (i) {
                i.find(".fc-" + e + "-button").prop("disabled", false).removeClass(s + "-state-disabled");
            }
        }
        function v() {
            return r;
        }
    }
    n.sourceNormalizers = [];
    n.sourceFetchers = [];
    var xt = {
        dataType: "json",
        cache: false
    };
    var It = 1;
    function kt() {
        var i = this;
        i.isFetchNeeded = d;
        i.fetchEvents = h;
        i.fetchEventSources = f;
        i.getEventSources = b;
        i.getEventSourceById = H;
        i.getEventSourcesByMatchArray = T;
        i.getEventSourcesByMatch = C;
        i.addEventSource = y;
        i.removeEventSource = w;
        i.removeEventSources = E;
        i.updateEvent = k;
        i.renderEvent = z;
        i.removeEvents = F;
        i.clientEvents = B;
        i.mutateEvent = P;
        i.normalizeEventDates = A;
        i.normalizeEventTimes = _;
        var r = i.reportEvents;
        var s = {
            events: []
        };
        var a = [ s ];
        var o, l;
        var u = 0;
        var c = [];
        e.each((i.options.events ? [ i.options.events ] : []).concat(i.options.eventSources || []), function(e, t) {
            var n = S(t);
            if (n) {
                a.push(n);
            }
        });
        function d(e, t) {
            return !o || e < o || t > l;
        }
        function h(e, t) {
            o = e;
            l = t;
            f(a, "reset");
        }
        function f(e, t) {
            var n, i;
            if (t === "reset") {
                c = [];
            } else if (t !== "add") {
                c = I(c, e);
            }
            for (n = 0; n < e.length; n++) {
                i = e[n];
                if (i._status !== "pending") {
                    u++;
                }
                i._fetchId = (i._fetchId || 0) + 1;
                i._status = "pending";
            }
            for (n = 0; n < e.length; n++) {
                i = e[n];
                v(i, i._fetchId);
            }
        }
        function v(t, n) {
            m(t, function(i) {
                var r = e.isArray(t.events);
                var s, a;
                var o;
                if (n === t._fetchId && t._status !== "rejected") {
                    t._status = "resolved";
                    if (i) {
                        for (s = 0; s < i.length; s++) {
                            a = i[s];
                            if (r) {
                                o = a;
                            } else {
                                o = O(a, t);
                            }
                            if (o) {
                                c.push.apply(c, V(o));
                            }
                        }
                    }
                    p();
                }
            });
        }
        function g(e) {
            var t = e._status === "pending";
            e._status = "rejected";
            if (t) {
                p();
            }
        }
        function p() {
            u--;
            if (!u) {
                r(c);
            }
        }
        function m(t, r) {
            var s;
            var a = n.sourceFetchers;
            var u;
            for (s = 0; s < a.length; s++) {
                u = a[s].call(i, t, o.clone(), l.clone(), i.options.timezone, r);
                if (u === true) {
                    return;
                } else if (typeof u == "object") {
                    m(u, r);
                    return;
                }
            }
            var c = t.events;
            if (c) {
                if (e.isFunction(c)) {
                    i.pushLoading();
                    c.call(i, o.clone(), l.clone(), i.options.timezone, function(e) {
                        r(e);
                        i.popLoading();
                    });
                } else if (e.isArray(c)) {
                    r(c);
                } else {
                    r();
                }
            } else {
                var d = t.url;
                if (d) {
                    var h = t.success;
                    var f = t.error;
                    var v = t.complete;
                    var g;
                    if (e.isFunction(t.data)) {
                        g = t.data();
                    } else {
                        g = t.data;
                    }
                    var p = e.extend({}, g || {});
                    var y = le(t.startParam, i.options.startParam);
                    var S = le(t.endParam, i.options.endParam);
                    var w = le(t.timezoneParam, i.options.timezoneParam);
                    if (y) {
                        p[y] = o.format();
                    }
                    if (S) {
                        p[S] = l.format();
                    }
                    if (i.options.timezone && i.options.timezone != "local") {
                        p[w] = i.options.timezone;
                    }
                    i.pushLoading();
                    e.ajax(e.extend({}, xt, t, {
                        data: p,
                        success: function(t) {
                            t = t || [];
                            var n = oe(h, this, arguments);
                            if (e.isArray(n)) {
                                t = n;
                            }
                            r(t);
                        },
                        error: function() {
                            oe(f, this, arguments);
                            r();
                        },
                        complete: function() {
                            oe(v, this, arguments);
                            i.popLoading();
                        }
                    }));
                } else {
                    r();
                }
            }
        }
        function y(e) {
            var t = S(e);
            if (t) {
                a.push(t);
                f([ t ], "add");
            }
        }
        function S(t) {
            var r = n.sourceNormalizers;
            var s;
            var a;
            if (e.isFunction(t) || e.isArray(t)) {
                s = {
                    events: t
                };
            } else if (typeof t === "string") {
                s = {
                    url: t
                };
            } else if (typeof t === "object") {
                s = e.extend({}, t);
            }
            if (s) {
                if (s.className) {
                    if (typeof s.className === "string") {
                        s.className = s.className.split(/\s+/);
                    }
                } else {
                    s.className = [];
                }
                if (e.isArray(s.events)) {
                    s.origArray = s.events;
                    s.events = e.map(s.events, function(e) {
                        return O(e, s);
                    });
                }
                for (a = 0; a < r.length; a++) {
                    r[a].call(i, s);
                }
                return s;
            }
        }
        function w(e) {
            D(C(e));
        }
        function E(e) {
            if (e == null) {
                D(a, true);
            } else {
                D(T(e));
            }
        }
        function D(t, n) {
            var i;
            for (i = 0; i < t.length; i++) {
                g(t[i]);
            }
            if (n) {
                a = [];
                c = [];
            } else {
                a = e.grep(a, function(e) {
                    for (i = 0; i < t.length; i++) {
                        if (e === t[i]) {
                            return false;
                        }
                    }
                    return true;
                });
                c = I(c, t);
            }
            r(c);
        }
        function b() {
            return a.slice(1);
        }
        function H(t) {
            return e.grep(a, function(e) {
                return e.id && e.id === t;
            })[0];
        }
        function T(t) {
            if (!t) {
                t = [];
            } else if (!e.isArray(t)) {
                t = [ t ];
            }
            var n = [];
            var i;
            for (i = 0; i < t.length; i++) {
                n.push.apply(n, C(t[i]));
            }
            return n;
        }
        function C(t) {
            var n, i;
            for (n = 0; n < a.length; n++) {
                i = a[n];
                if (i === t) {
                    return [ i ];
                }
            }
            i = H(t);
            if (i) {
                return [ i ];
            }
            return e.grep(a, function(e) {
                return R(t, e);
            });
        }
        function R(e, t) {
            return e && t && x(e) == x(t);
        }
        function x(e) {
            return (typeof e === "object" ? e.origArray || e.googleCalendarId || e.url || e.events : null) || e;
        }
        function I(t, n) {
            return e.grep(t, function(e) {
                for (var t = 0; t < n.length; t++) {
                    if (e.source === n[t]) {
                        return false;
                    }
                }
                return true;
            });
        }
        function k(e) {
            e.start = i.moment(e.start);
            if (e.end) {
                e.end = i.moment(e.end);
            } else {
                e.end = null;
            }
            P(e, M(e));
            r(c);
        }
        function M(t) {
            var n = {};
            e.each(t, function(e, t) {
                if (L(e)) {
                    if (t !== undefined && ae(t)) {
                        n[e] = t;
                    }
                }
            });
            return n;
        }
        function L(e) {
            return !/^_|^(id|allDay|start|end)$/.test(e);
        }
        function z(e, t) {
            var n = O(e);
            var i;
            var a, o;
            if (n) {
                i = V(n);
                for (a = 0; a < i.length; a++) {
                    o = i[a];
                    if (!o.source) {
                        if (t) {
                            s.events.push(o);
                            o.source = s;
                        }
                        c.push(o);
                    }
                }
                r(c);
                return i;
            }
            return [];
        }
        function F(t) {
            var n;
            var i;
            if (t == null) {
                t = function() {
                    return true;
                };
            } else if (!e.isFunction(t)) {
                n = t + "";
                t = function(e) {
                    return e._id == n;
                };
            }
            c = e.grep(c, t, true);
            for (i = 0; i < a.length; i++) {
                if (e.isArray(a[i].events)) {
                    a[i].events = e.grep(a[i].events, t, true);
                }
            }
            r(c);
        }
        function B(t) {
            if (e.isFunction(t)) {
                return e.grep(c, t);
            } else if (t != null) {
                t += "";
                return e.grep(c, function(e) {
                    return e._id == t;
                });
            }
            return c;
        }
        i.rezoneArrayEventSources = function() {
            var t;
            var n;
            var i;
            for (t = 0; t < a.length; t++) {
                n = a[t].events;
                if (e.isArray(n)) {
                    for (i = 0; i < n.length; i++) {
                        N(n[i]);
                    }
                }
            }
        };
        function N(e) {
            e.start = i.moment(e.start);
            if (e.end) {
                e.end = i.moment(e.end);
            }
            Mt(e);
        }
        function O(n, r) {
            var s = {};
            var a, o;
            var l;
            if (i.options.eventDataTransform) {
                n = i.options.eventDataTransform(n);
            }
            if (r && r.eventDataTransform) {
                n = r.eventDataTransform(n);
            }
            e.extend(s, n);
            if (r) {
                s.source = r;
            }
            s._id = n._id || (n.id === undefined ? "_fc" + It++ : n.id + "");
            if (n.className) {
                if (typeof n.className == "string") {
                    s.className = n.className.split(/\s+/);
                } else {
                    s.className = n.className;
                }
            } else {
                s.className = [];
            }
            a = n.start || n.date;
            o = n.end;
            if (J(a)) {
                a = t.duration(a);
            }
            if (J(o)) {
                o = t.duration(o);
            }
            if (n.dow || t.isDuration(a) || t.isDuration(o)) {
                s.start = a ? t.duration(a) : null;
                s.end = o ? t.duration(o) : null;
                s._recurring = true;
            } else {
                if (a) {
                    a = i.moment(a);
                    if (!a.isValid()) {
                        return false;
                    }
                }
                if (o) {
                    o = i.moment(o);
                    if (!o.isValid()) {
                        o = null;
                    }
                }
                l = n.allDay;
                if (l === undefined) {
                    l = le(r ? r.allDayDefault : undefined, i.options.allDayDefault);
                }
                G(a, o, l, s);
            }
            i.normalizeEvent(s);
            return s;
        }
        function G(e, t, n, i) {
            i.start = e;
            i.end = t;
            i.allDay = n;
            A(i);
            Mt(i);
        }
        function A(e) {
            _(e);
            if (e.end && !e.end.isAfter(e.start)) {
                e.end = null;
            }
            if (!e.end) {
                if (i.options.forceEventDuration) {
                    e.end = i.getDefaultEventEnd(e.allDay, e.start);
                } else {
                    e.end = null;
                }
            }
        }
        function _(e) {
            if (e.allDay == null) {
                e.allDay = !(e.start.hasTime() || e.end && e.end.hasTime());
            }
            if (e.allDay) {
                e.start.stripTime();
                if (e.end) {
                    e.end.stripTime();
                }
            } else {
                if (!e.start.hasTime()) {
                    e.start = i.applyTimezone(e.start.time(0));
                }
                if (e.end && !e.end.hasTime()) {
                    e.end = i.applyTimezone(e.end.time(0));
                }
            }
        }
        function V(t, n, i) {
            var r = [];
            var s;
            var a;
            var u;
            var c;
            var d, h;
            var f, v;
            var g;
            n = n || o;
            i = i || l;
            if (t) {
                if (t._recurring) {
                    if (a = t.dow) {
                        s = {};
                        for (u = 0; u < a.length; u++) {
                            s[a[u]] = true;
                        }
                    }
                    c = n.clone().stripTime();
                    while (c.isBefore(i)) {
                        if (!s || s[c.day()]) {
                            d = t.start;
                            h = t.end;
                            f = c.clone();
                            v = null;
                            if (d) {
                                f = f.time(d);
                            }
                            if (h) {
                                v = c.clone().time(h);
                            }
                            g = e.extend({}, t);
                            G(f, v, !d && !h, g);
                            r.push(g);
                        }
                        c.add(1, "days");
                    }
                } else {
                    r.push(t);
                }
            }
            return r;
        }
        function P(t, n, r) {
            var s = {};
            var a;
            var o;
            var l;
            var u;
            var c;
            var d;
            function h(e, t) {
                if (r) {
                    return j(e, t, r);
                } else if (n.allDay) {
                    return W(e, t);
                } else {
                    return Y(e, t);
                }
            }
            n = n || {};
            if (!n.start) {
                n.start = t.start.clone();
            }
            if (n.end === undefined) {
                n.end = t.end ? t.end.clone() : null;
            }
            if (n.allDay == null) {
                n.allDay = t.allDay;
            }
            A(n);
            a = {
                start: t._start.clone(),
                end: t._end ? t._end.clone() : i.getDefaultEventEnd(t._allDay, t._start),
                allDay: n.allDay
            };
            A(a);
            o = t._end !== null && n.end === null;
            l = h(n.start, a.start);
            if (n.end) {
                u = h(n.end, a.end);
                c = u.subtract(l);
            } else {
                c = null;
            }
            e.each(n, function(e, t) {
                if (L(e)) {
                    if (t !== undefined) {
                        s[e] = t;
                    }
                }
            });
            d = U(B(t._id), o, n.allDay, l, c, s);
            return {
                dateDelta: l,
                durationDelta: c,
                undo: d
            };
        }
        function U(t, n, r, s, a, o) {
            var l = i.getIsAmbigTimezone();
            var u = [];
            if (s && !s.valueOf()) {
                s = null;
            }
            if (a && !a.valueOf()) {
                a = null;
            }
            e.each(t, function(t, c) {
                var d;
                var h;
                d = {
                    start: c.start.clone(),
                    end: c.end ? c.end.clone() : null,
                    allDay: c.allDay
                };
                e.each(o, function(e) {
                    d[e] = c[e];
                });
                h = {
                    start: c._start,
                    end: c._end,
                    allDay: r
                };
                A(h);
                if (n) {
                    h.end = null;
                } else if (a && !h.end) {
                    h.end = i.getDefaultEventEnd(h.allDay, h.start);
                }
                if (s) {
                    h.start.add(s);
                    if (h.end) {
                        h.end.add(s);
                    }
                }
                if (a) {
                    h.end.add(a);
                }
                if (l && !h.allDay && (s || a)) {
                    h.start.stripZone();
                    if (h.end) {
                        h.end.stripZone();
                    }
                }
                e.extend(c, o, h);
                Mt(c);
                u.push(function() {
                    e.extend(c, d);
                    Mt(c);
                });
            });
            return function() {
                for (var e = 0; e < u.length; e++) {
                    u[e]();
                }
            };
        }
        i.getBusinessHoursEvents = Z;
        function Z(t) {
            var n = i.options.businessHours;
            if (e.isArray(n)) {
                var r = [];
                for (var s in n) {
                    r = r.concat(q(t, n[s]));
                }
                return r;
            } else {
                return q(t, n);
            }
            return [];
        }
        function q(t, n) {
            var r = {
                className: "fc-nonbusiness",
                start: "09:00",
                end: "17:00",
                dow: [ 1, 2, 3, 4, 5 ],
                rendering: "inverse-background"
            };
            var s = i.getView();
            var a;
            if (n) {
                a = e.extend({}, r, typeof n === "object" ? n : {});
            }
            if (a) {
                if (t) {
                    a.start = null;
                    a.end = null;
                }
                return V(O(a), s.start, s.end);
            }
            return [];
        }
        i.isEventSpanAllowed = $;
        i.isExternalSpanAllowed = X;
        i.isSelectionSpanAllowed = Q;
        function $(e, t) {
            var n = t.source || {};
            var r = le(t.constraint, n.constraint, i.options.eventConstraint);
            var s = le(t.overlap, n.overlap, i.options.eventOverlap);
            return K(e, r, s, t);
        }
        function X(t, n, i) {
            var r;
            var s;
            if (i) {
                r = e.extend({}, i, n);
                s = V(O(r))[0];
            }
            if (s) {
                return $(t, s);
            } else {
                return Q(t);
            }
        }
        function Q(e) {
            return K(e, i.options.selectConstraint, i.options.selectOverlap);
        }
        function K(e, t, n, r) {
            var s;
            var a;
            var o;
            var l, u;
            var c;
            if (t != null) {
                s = ee(t);
                a = false;
                multi = false;
                if (t=='businessHours' && s.length>0) {
                    if (s[0].businessHoursMode=='multi') {
                        multi = true;
                        a = true;
                    }
                }
                if (jQuery.isArray(s)) {
                    if (s.length==0) {
                        a = true;
                    }
                }
                for (l = 0; l < s.length; l++) {
                    var result = te(s[l], e, multi);
                    if (result && !multi) {
                        a = true;
                        break;
                    }
                    if (multi && result) {
                        a = false;
                        break;
                    }
                }
                if (!a) {
                    return false;
                }
            }
            o = i.getPeerEvents(e, r);
            for (l = 0; l < o.length; l++) {
                u = o[l];
                if (ne(u, e)) {
                    if (n === false) {
                        return false;
                    } else if (typeof n === "function" && !n(u, r)) {
                        return false;
                    }
                    if (r) {
                        c = le(u.overlap, (u.source || {}).overlap);
                        if (c === false) {
                            return false;
                        }
                        if (typeof c === "function" && !c(r, u)) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        function ee(t) {
            if (t === "businessHours") {
                return Z();
            }
            if (e.isArray(t)) {
                var n = [];
                for (var i in t) {
                    n = n.concat(V(O(t[i])));
                }
                return n;
            }
            if (typeof t === "object") {
                return V(O(t));
            }
            return B(t);
        }
        function te(e, t, inverse) {
            var n = e.start.clone().stripZone();
            var r = i.getEventEnd(e).stripZone();
            if (inverse)
                return t.end > n && t.start < r;
            else
                return t.start >= n && t.end <= r;
        }

        function ne(e, t) {
            var n = e.start.clone().stripZone();
            var r = i.getEventEnd(e).stripZone();
            return t.start < r && t.end > n;
        }
        i.getEventCache = function() {
            return c;
        };
    }
    St.prototype.normalizeEvent = function(e) {};
    St.prototype.getPeerEvents = function(e, t) {
        var n = this.getEventCache();
        var i = [];
        var r, s;
        for (r = 0; r < n.length; r++) {
            s = n[r];
            if (!t || t._id !== s._id) {
                i.push(s);
            }
        }
        return i;
    };
    function Mt(e) {
        e._allDay = e.allDay;
        e._start = e.start.clone();
        e._end = e.end ? e.end.clone() : null;
    }
    var Lt = n.BasicView = mt.extend({
        scroller: null,
        dayGridClass: lt,
        dayGrid: null,
        dayNumbersVisible: false,
        weekNumbersVisible: false,
        weekNumberWidth: null,
        headContainerEl: null,
        headRowEl: null,
        initialize: function() {
            this.dayGrid = this.instantiateDayGrid();
            this.scroller = new yt({
                overflowX: "hidden",
                overflowY: "auto"
            });
        },
        instantiateDayGrid: function() {
            var e = this.dayGridClass.extend(zt);
            return new e(this);
        },
        setRange: function(e) {
            mt.prototype.setRange.call(this, e);
            this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit);
            this.dayGrid.setRange(e);
        },
        computeRange: function(e) {
            var t = mt.prototype.computeRange.call(this, e);
            if (/year|month/.test(t.intervalUnit)) {
                t.start.startOf("week");
                t.start = this.skipHiddenDays(t.start);
                if (t.end.weekday()) {
                    t.end.add(1, "week").startOf("week");
                    t.end = this.skipHiddenDays(t.end, -1, true);
                }
            }
            return t;
        },
        renderDates: function() {
            this.dayNumbersVisible = this.dayGrid.rowCnt > 1;
            this.weekNumbersVisible = this.opt("weekNumbers");
            this.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;
            this.el.addClass("fc-basic-view").html(this.renderSkeletonHtml());
            this.renderHead();
            this.scroller.render();
            var t = this.scroller.el.addClass("fc-day-grid-container");
            var n = e('<div class="fc-day-grid" />').appendTo(t);
            this.el.find(".fc-body > tr > td").append(t);
            this.dayGrid.setElement(n);
            this.dayGrid.renderDates(this.hasRigidRows());
        },
        renderHead: function() {
            this.headContainerEl = this.el.find(".fc-head-container").html(this.dayGrid.renderHeadHtml());
            this.headRowEl = this.headContainerEl.find(".fc-row");
        },
        unrenderDates: function() {
            this.dayGrid.unrenderDates();
            this.dayGrid.removeElement();
            this.scroller.destroy();
        },
        renderBusinessHours: function() {
            this.dayGrid.renderBusinessHours();
        },
        unrenderBusinessHours: function() {
            this.dayGrid.unrenderBusinessHours();
        },
        renderSkeletonHtml: function() {
            return "" + "<table>" + '<thead class="fc-head">' + "<tr>" + '<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' + "</tr>" + "</thead>" + '<tbody class="fc-body">' + "<tr>" + '<td class="' + this.widgetContentClass + '"></td>' + "</tr>" + "</tbody>" + "</table>";
        },
        weekNumberStyleAttr: function() {
            if (this.weekNumberWidth !== null) {
                return 'style="width:' + this.weekNumberWidth + 'px"';
            }
            return "";
        },
        hasRigidRows: function() {
            var e = this.opt("eventLimit");
            return e && typeof e !== "number";
        },
        updateWidth: function() {
            if (this.weekNumbersVisible) {
                this.weekNumberWidth = f(this.el.find(".fc-week-number"));
            }
        },
        setHeight: function(e, t) {
            var n = this.opt("eventLimit");
            var i;
            var r;
            this.scroller.clear();
            l(this.headRowEl);
            this.dayGrid.removeSegPopover();
            if (n && typeof n === "number") {
                this.dayGrid.limitRows(n);
            }
            i = this.computeScrollerHeight(e);
            this.setGridHeight(i, t);
            if (n && typeof n !== "number") {
                this.dayGrid.limitRows(n);
            }
            if (!t) {
                this.scroller.setHeight(i);
                r = this.scroller.getScrollbarWidths();
                if (r.left || r.right) {
                    o(this.headRowEl, r);
                    i = this.computeScrollerHeight(e);
                    this.scroller.setHeight(i);
                }
                this.scroller.lockOverflow(r);
            }
        },
        computeScrollerHeight: function(e) {
            return e - v(this.el, this.scroller.el);
        },
        setGridHeight: function(e, t) {
            if (t) {
                h(this.dayGrid.rowEls);
            } else {
                d(this.dayGrid.rowEls, e, true);
            }
        },
        queryScroll: function() {
            return this.scroller.getScrollTop();
        },
        setScroll: function(e) {
            this.scroller.setScrollTop(e);
        },
        prepareHits: function() {
            this.dayGrid.prepareHits();
        },
        releaseHits: function() {
            this.dayGrid.releaseHits();
        },
        queryHit: function(e, t) {
            return this.dayGrid.queryHit(e, t);
        },
        getHitSpan: function(e) {
            return this.dayGrid.getHitSpan(e);
        },
        getHitEl: function(e) {
            return this.dayGrid.getHitEl(e);
        },
        renderEvents: function(e) {
            this.dayGrid.renderEvents(e);
            this.updateHeight();
        },
        getEventSegs: function() {
            return this.dayGrid.getEventSegs();
        },
        unrenderEvents: function() {
            this.dayGrid.unrenderEvents();
        },
        renderDrag: function(e, t) {
            return this.dayGrid.renderDrag(e, t);
        },
        unrenderDrag: function() {
            this.dayGrid.unrenderDrag();
        },
        renderSelection: function(e) {
            this.dayGrid.renderSelection(e);
        },
        unrenderSelection: function() {
            this.dayGrid.unrenderSelection();
        }
    });
    var zt = {
        renderHeadIntroHtml: function() {
            var e = this.view;
            if (e.weekNumbersVisible) {
                return "" + '<th class="fc-week-number ' + e.widgetHeaderClass + '" ' + e.weekNumberStyleAttr() + ">" + "<span>" + ue(e.opt("weekNumberTitle")) + "</span>" + "</th>";
            }
            return "";
        },
        renderNumberIntroHtml: function(e) {
            var t = this.view;
            if (t.weekNumbersVisible) {
                return "" + '<td class="fc-week-number" ' + t.weekNumberStyleAttr() + ">" + "<span>" + this.getCellDate(e, 0).format("w") + "</span>" + "</td>";
            }
            return "";
        },
        renderBgIntroHtml: function() {
            var e = this.view;
            if (e.weekNumbersVisible) {
                return '<td class="fc-week-number ' + e.widgetContentClass + '" ' + e.weekNumberStyleAttr() + "></td>";
            }
            return "";
        },
        renderIntroHtml: function() {
            var e = this.view;
            if (e.weekNumbersVisible) {
                return '<td class="fc-week-number" ' + e.weekNumberStyleAttr() + "></td>";
            }
            return "";
        }
    };
    var Ft = n.MonthView = Lt.extend({
        computeRange: function(e) {
            var t = Lt.prototype.computeRange.call(this, e);
            var n;
            if (this.isFixedWeeks()) {
                n = Math.ceil(t.end.diff(t.start, "weeks", true));
                t.end.add(6 - n, "weeks");
            }
            return t;
        },
        setGridHeight: function(e, t) {
            t = t || this.opt("weekMode") === "variable";
            if (t) {
                e *= this.rowCnt / 6;
            }
            d(this.dayGrid.rowEls, e, !t);
        },
        isFixedWeeks: function() {
            var e = this.opt("weekMode");
            if (e) {
                return e === "fixed";
            }
            return this.opt("fixedWeekCount");
        }
    });
    i.basic = {
        class: Lt
    };
    i.basicDay = {
        type: "basic",
        duration: {
            days: 1
        }
    };
    i.basicWeek = {
        type: "basic",
        duration: {
            weeks: 1
        }
    };
    i.month = {
        class: Ft,
        duration: {
            months: 1
        },
        defaults: {
            fixedWeekCount: true
        }
    };
    var Bt = n.AgendaView = mt.extend({
        scroller: null,
        timeGridClass: dt,
        timeGrid: null,
        dayGridClass: lt,
        dayGrid: null,
        axisWidth: null,
        headContainerEl: null,
        noScrollRowEls: null,
        bottomRuleEl: null,
        initialize: function() {
            this.timeGrid = this.instantiateTimeGrid();
            if (this.opt("allDaySlot")) {
                this.dayGrid = this.instantiateDayGrid();
            }
            this.scroller = new yt({
                overflowX: "hidden",
                overflowY: "auto"
            });
        },
        instantiateTimeGrid: function() {
            var e = this.timeGridClass.extend(Nt);
            return new e(this);
        },
        instantiateDayGrid: function() {
            var e = this.dayGridClass.extend(Ot);
            return new e(this);
        },
        setRange: function(e) {
            mt.prototype.setRange.call(this, e);
            this.timeGrid.setRange(e);
            if (this.dayGrid) {
                this.dayGrid.setRange(e);
            }
        },
        renderDates: function() {
            this.el.addClass("fc-agenda-view").html(this.renderSkeletonHtml());
            this.renderHead();
            this.scroller.render();
            var t = this.scroller.el.addClass("fc-time-grid-container");
            var n = e('<div class="fc-time-grid" />').appendTo(t);
            this.el.find(".fc-body > tr > td").append(t);
            this.timeGrid.setElement(n);
            this.timeGrid.renderDates();
            this.bottomRuleEl = e('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>').appendTo(this.timeGrid.el);
            if (this.dayGrid) {
                this.dayGrid.setElement(this.el.find(".fc-day-grid"));
                this.dayGrid.renderDates();
                this.dayGrid.bottomCoordPadding = this.dayGrid.el.next("hr").outerHeight();
            }
            this.noScrollRowEls = this.el.find(".fc-row:not(.fc-scroller *)");
        },
        renderHead: function() {
            this.headContainerEl = this.el.find(".fc-head-container").html(this.timeGrid.renderHeadHtml());
        },
        unrenderDates: function() {
            this.timeGrid.unrenderDates();
            this.timeGrid.removeElement();
            if (this.dayGrid) {
                this.dayGrid.unrenderDates();
                this.dayGrid.removeElement();
            }
            this.scroller.destroy();
        },
        renderSkeletonHtml: function() {
            return "" + "<table>" + '<thead class="fc-head">' + "<tr>" + '<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' + "</tr>" + "</thead>" + '<tbody class="fc-body">' + "<tr>" + '<td class="' + this.widgetContentClass + '">' + (this.dayGrid ? '<div class="fc-day-grid"/>' + '<hr class="fc-divider ' + this.widgetHeaderClass + '"/>' : "") + "</td>" + "</tr>" + "</tbody>" + "</table>";
        },
        axisStyleAttr: function() {
            if (this.axisWidth !== null) {
                return 'style="width:' + this.axisWidth + 'px"';
            }
            return "";
        },
        renderBusinessHours: function() {
            this.timeGrid.renderBusinessHours();
            if (this.dayGrid) {
                this.dayGrid.renderBusinessHours();
            }
        },
        unrenderBusinessHours: function() {
            this.timeGrid.unrenderBusinessHours();
            if (this.dayGrid) {
                this.dayGrid.unrenderBusinessHours();
            }
        },
        getNowIndicatorUnit: function() {
            return this.timeGrid.getNowIndicatorUnit();
        },
        renderNowIndicator: function(e) {
            this.timeGrid.renderNowIndicator(e);
        },
        unrenderNowIndicator: function() {
            this.timeGrid.unrenderNowIndicator();
        },
        updateSize: function(e) {
            this.timeGrid.updateSize(e);
            mt.prototype.updateSize.call(this, e);
        },
        updateWidth: function() {
            this.axisWidth = f(this.el.find(".fc-axis"));
        },
        setHeight: function(e, t) {
            var n;
            var i;
            var r;
            this.bottomRuleEl.hide();
            this.scroller.clear();
            l(this.noScrollRowEls);
            if (this.dayGrid) {
                this.dayGrid.removeSegPopover();
                n = this.opt("eventLimit");
                if (n && typeof n !== "number") {
                    n = Gt;
                }
                if (n) {
                    this.dayGrid.limitRows(n);
                }
            }
            if (!t) {
                i = this.computeScrollerHeight(e);
                this.scroller.setHeight(i);
                r = this.scroller.getScrollbarWidths();
                if (r.left || r.right) {
                    o(this.noScrollRowEls, r);
                    i = this.computeScrollerHeight(e);
                    this.scroller.setHeight(i);
                }
                this.scroller.lockOverflow(r);
                if (this.timeGrid.getTotalSlatHeight() < i) {
                    this.bottomRuleEl.show();
                }
            }
        },
        computeScrollerHeight: function(e) {
            return e - v(this.el, this.scroller.el);
        },
        computeInitialScroll: function() {
            var e = t.duration(this.opt("scrollTime"));
            var n = this.timeGrid.computeTimeTop(e);
            n = Math.ceil(n);
            if (n) {
                n++;
            }
            return n;
        },
        queryScroll: function() {
            return this.scroller.getScrollTop();
        },
        setScroll: function(e) {
            this.scroller.setScrollTop(e);
        },
        prepareHits: function() {
            this.timeGrid.prepareHits();
            if (this.dayGrid) {
                this.dayGrid.prepareHits();
            }
        },
        releaseHits: function() {
            this.timeGrid.releaseHits();
            if (this.dayGrid) {
                this.dayGrid.releaseHits();
            }
        },
        queryHit: function(e, t) {
            var n = this.timeGrid.queryHit(e, t);
            if (!n && this.dayGrid) {
                n = this.dayGrid.queryHit(e, t);
            }
            return n;
        },
        getHitSpan: function(e) {
            return e.component.getHitSpan(e);
        },
        getHitEl: function(e) {
            return e.component.getHitEl(e);
        },
        renderEvents: function(e) {
            var t = [];
            var n = [];
            var i = [];
            var r;
            var s;
            for (s = 0; s < e.length; s++) {
                if (e[s].allDay) {
                    t.push(e[s]);
                } else {
                    n.push(e[s]);
                }
            }
            r = this.timeGrid.renderEvents(n);
            if (this.dayGrid) {
                i = this.dayGrid.renderEvents(t);
            }
            this.updateHeight();
        },
        getEventSegs: function() {
            return this.timeGrid.getEventSegs().concat(this.dayGrid ? this.dayGrid.getEventSegs() : []);
        },
        unrenderEvents: function() {
            this.timeGrid.unrenderEvents();
            if (this.dayGrid) {
                this.dayGrid.unrenderEvents();
            }
        },
        renderDrag: function(e, t) {
            if (e.start.hasTime()) {
                return this.timeGrid.renderDrag(e, t);
            } else if (this.dayGrid) {
                return this.dayGrid.renderDrag(e, t);
            }
        },
        unrenderDrag: function() {
            this.timeGrid.unrenderDrag();
            if (this.dayGrid) {
                this.dayGrid.unrenderDrag();
            }
        },
        renderSelection: function(e) {
            if (e.start.hasTime() || e.end.hasTime()) {
                this.timeGrid.renderSelection(e);
            } else if (this.dayGrid) {
                this.dayGrid.renderSelection(e);
            }
        },
        unrenderSelection: function() {
            this.timeGrid.unrenderSelection();
            if (this.dayGrid) {
                this.dayGrid.unrenderSelection();
            }
        }
    });
    var Nt = {
        renderHeadIntroHtml: function() {
            var e = this.view;
            var t;
            if (e.opt("weekNumbers")) {
                t = this.start.format(e.opt("smallWeekFormat"));
                return "" + '<th class="fc-axis fc-week-number ' + e.widgetHeaderClass + '" ' + e.axisStyleAttr() + ">" + "<span>" + ue(t) + "</span>" + "</th>";
            } else {
                return '<th class="fc-axis ' + e.widgetHeaderClass + '" ' + e.axisStyleAttr() + "></th>";
            }
        },
        renderBgIntroHtml: function() {
            var e = this.view;
            return '<td class="fc-axis ' + e.widgetContentClass + '" ' + e.axisStyleAttr() + "></td>";
        },
        renderIntroHtml: function() {
            var e = this.view;
            return '<td class="fc-axis" ' + e.axisStyleAttr() + "></td>";
        }
    };
    var Ot = {
        renderBgIntroHtml: function() {
            var e = this.view;
            return "" + '<td class="fc-axis ' + e.widgetContentClass + '" ' + e.axisStyleAttr() + ">" + "<span>" + (e.opt("allDayHtml") || ue(e.opt("allDayText"))) + "</span>" + "</td>";
        },
        renderIntroHtml: function() {
            var e = this.view;
            return '<td class="fc-axis" ' + e.axisStyleAttr() + "></td>";
        }
    };
    var Gt = 5;
    var At = [ {
        hours: 1
    }, {
        minutes: 30
    }, {
        minutes: 15
    }, {
        seconds: 30
    }, {
        seconds: 15
    } ];
    i.agenda = {
        class: Bt,
        defaults: {
            allDaySlot: true,
            allDayText: "all-day",
            slotDuration: "00:30:00",
            minTime: "00:00:00",
            maxTime: "24:00:00",
            slotEventOverlap: true
        }
    };
    i.agendaDay = {
        type: "agenda",
        duration: {
            days: 1
        }
    };
    i.agendaWeek = {
        type: "agenda",
        duration: {
            weeks: 1
        }
    };
    return n;
});